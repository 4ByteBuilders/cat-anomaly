generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  clientId       String              @id @default(cuid())
  name           String
  email          String              @unique
  phone          String?
  contracts      Contract[]
  dailySummaries DailyUsageSummary[]
}

model EquipmentType {
  id               String        @id @default(cuid())
  name             String        @unique
  equipment        Equipment[]
  waitingListItems WaitingList[]
}

model Equipment {
  equipmentId       String              @id @default(cuid())
  status            String              @default("available")
  equipmentType     EquipmentType       @relation(fields: [equipmentTypeId], references: [id])
  equipmentTypeId   String
  lineItems         LineItem[]
  DailyUsageSummary DailyUsageSummary[]
}

model Contract {
  contractId String     @id @default(cuid())
  siteId     String
  startDate  DateTime
  endDate    DateTime
  client     Client     @relation(fields: [clientId], references: [clientId])
  clientId   String
  lineItems  LineItem[]
}

model LineItem {
  lineItemId       String    @id @default(cuid())
  startDate        DateTime
  endDate          DateTime
  totalEngineHours Float?
  fuelUsage        Float?
  downtimeHours    Float?
  operatingDays    Int?
  contract         Contract  @relation(fields: [contractId], references: [contractId])
  contractId       String
  equipment        Equipment @relation(fields: [equipmentId], references: [equipmentId])
  equipmentId      String
  operator         Operator? @relation(fields: [lastOperatorId], references: [operatorId])
  lastOperatorId   String?
}

model Operator {
  operatorId String     @id @default(cuid())
  name       String
  lineItems  LineItem[]
}

model WaitingList {
  requestId          String        @id @default(cuid())
  clientId           String
  equipmentType      EquipmentType @relation(fields: [equipmentTypeId], references: [id])
  equipmentTypeId    String
  quantity           Int
  requestedStartDate DateTime
  status             String        @default("PENDING")
  createdAt          DateTime      @default(now())
}

enum EventType {
  ENGINE_STATUS
  FUEL_LEVEL
  LOCATION_UPDATE
  ENGINE_TEMP
  DIAGNOSTIC_CODE
}

model RawEventLog {
  id          String    @id @default(cuid())
  timestamp   DateTime  @default(now())
  equipmentId String
  eventType   EventType
  value       Json
  isProcessed Boolean   @default(false)
}

model DailyUsageSummary {
  id                   String    @id @default(cuid())
  date                 DateTime  @db.Date
  equipmentId          String
  totalEngineHours     Float
  totalIdleHours       Float
  workingHours         Float
  fuelConsumed         Float
  distanceTraveled     Float?
  highEngineTempAlerts Int
  suddenFuelDrops      Int
  diagnosticErrors     Int
  equipment            Equipment @relation(fields: [equipmentId], references: [equipmentId])
  Client               Client?   @relation(fields: [clientClientId], references: [clientId])
  clientClientId       String?

  @@unique([equipmentId, date])
}
