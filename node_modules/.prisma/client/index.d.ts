
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model EquipmentType
 * 
 */
export type EquipmentType = $Result.DefaultSelection<Prisma.$EquipmentTypePayload>
/**
 * Model Equipment
 * 
 */
export type Equipment = $Result.DefaultSelection<Prisma.$EquipmentPayload>
/**
 * Model Contract
 * 
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model LineItem
 * 
 */
export type LineItem = $Result.DefaultSelection<Prisma.$LineItemPayload>
/**
 * Model Operator
 * 
 */
export type Operator = $Result.DefaultSelection<Prisma.$OperatorPayload>
/**
 * Model WaitingList
 * 
 */
export type WaitingList = $Result.DefaultSelection<Prisma.$WaitingListPayload>
/**
 * Model RawEventLog
 * 
 */
export type RawEventLog = $Result.DefaultSelection<Prisma.$RawEventLogPayload>
/**
 * Model DailyUsageSummary
 * 
 */
export type DailyUsageSummary = $Result.DefaultSelection<Prisma.$DailyUsageSummaryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EventType: {
  ENGINE_STATUS: 'ENGINE_STATUS',
  FUEL_LEVEL: 'FUEL_LEVEL',
  LOCATION_UPDATE: 'LOCATION_UPDATE',
  ENGINE_TEMP: 'ENGINE_TEMP',
  DIAGNOSTIC_CODE: 'DIAGNOSTIC_CODE'
};

export type EventType = (typeof EventType)[keyof typeof EventType]

}

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipmentType`: Exposes CRUD operations for the **EquipmentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EquipmentTypes
    * const equipmentTypes = await prisma.equipmentType.findMany()
    * ```
    */
  get equipmentType(): Prisma.EquipmentTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipment`: Exposes CRUD operations for the **Equipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipment
    * const equipment = await prisma.equipment.findMany()
    * ```
    */
  get equipment(): Prisma.EquipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lineItem`: Exposes CRUD operations for the **LineItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LineItems
    * const lineItems = await prisma.lineItem.findMany()
    * ```
    */
  get lineItem(): Prisma.LineItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operator`: Exposes CRUD operations for the **Operator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operators
    * const operators = await prisma.operator.findMany()
    * ```
    */
  get operator(): Prisma.OperatorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.waitingList`: Exposes CRUD operations for the **WaitingList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WaitingLists
    * const waitingLists = await prisma.waitingList.findMany()
    * ```
    */
  get waitingList(): Prisma.WaitingListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rawEventLog`: Exposes CRUD operations for the **RawEventLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RawEventLogs
    * const rawEventLogs = await prisma.rawEventLog.findMany()
    * ```
    */
  get rawEventLog(): Prisma.RawEventLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyUsageSummary`: Exposes CRUD operations for the **DailyUsageSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyUsageSummaries
    * const dailyUsageSummaries = await prisma.dailyUsageSummary.findMany()
    * ```
    */
  get dailyUsageSummary(): Prisma.DailyUsageSummaryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Client: 'Client',
    EquipmentType: 'EquipmentType',
    Equipment: 'Equipment',
    Contract: 'Contract',
    LineItem: 'LineItem',
    Operator: 'Operator',
    WaitingList: 'WaitingList',
    RawEventLog: 'RawEventLog',
    DailyUsageSummary: 'DailyUsageSummary'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "client" | "equipmentType" | "equipment" | "contract" | "lineItem" | "operator" | "waitingList" | "rawEventLog" | "dailyUsageSummary"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      EquipmentType: {
        payload: Prisma.$EquipmentTypePayload<ExtArgs>
        fields: Prisma.EquipmentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipmentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipmentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>
          }
          findFirst: {
            args: Prisma.EquipmentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipmentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>
          }
          findMany: {
            args: Prisma.EquipmentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>[]
          }
          create: {
            args: Prisma.EquipmentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>
          }
          createMany: {
            args: Prisma.EquipmentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipmentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>[]
          }
          delete: {
            args: Prisma.EquipmentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>
          }
          update: {
            args: Prisma.EquipmentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>
          }
          deleteMany: {
            args: Prisma.EquipmentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipmentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipmentTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>[]
          }
          upsert: {
            args: Prisma.EquipmentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentTypePayload>
          }
          aggregate: {
            args: Prisma.EquipmentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipmentType>
          }
          groupBy: {
            args: Prisma.EquipmentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipmentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipmentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<EquipmentTypeCountAggregateOutputType> | number
          }
        }
      }
      Equipment: {
        payload: Prisma.$EquipmentPayload<ExtArgs>
        fields: Prisma.EquipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          findFirst: {
            args: Prisma.EquipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          findMany: {
            args: Prisma.EquipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          create: {
            args: Prisma.EquipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          createMany: {
            args: Prisma.EquipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          delete: {
            args: Prisma.EquipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          update: {
            args: Prisma.EquipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          deleteMany: {
            args: Prisma.EquipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EquipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EquipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
          }
          upsert: {
            args: Prisma.EquipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EquipmentPayload>
          }
          aggregate: {
            args: Prisma.EquipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipment>
          }
          groupBy: {
            args: Prisma.EquipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipmentCountArgs<ExtArgs>
            result: $Utils.Optional<EquipmentCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      LineItem: {
        payload: Prisma.$LineItemPayload<ExtArgs>
        fields: Prisma.LineItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LineItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LineItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>
          }
          findFirst: {
            args: Prisma.LineItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LineItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>
          }
          findMany: {
            args: Prisma.LineItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>[]
          }
          create: {
            args: Prisma.LineItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>
          }
          createMany: {
            args: Prisma.LineItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LineItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>[]
          }
          delete: {
            args: Prisma.LineItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>
          }
          update: {
            args: Prisma.LineItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>
          }
          deleteMany: {
            args: Prisma.LineItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LineItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LineItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>[]
          }
          upsert: {
            args: Prisma.LineItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LineItemPayload>
          }
          aggregate: {
            args: Prisma.LineItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLineItem>
          }
          groupBy: {
            args: Prisma.LineItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<LineItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.LineItemCountArgs<ExtArgs>
            result: $Utils.Optional<LineItemCountAggregateOutputType> | number
          }
        }
      }
      Operator: {
        payload: Prisma.$OperatorPayload<ExtArgs>
        fields: Prisma.OperatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findFirst: {
            args: Prisma.OperatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findMany: {
            args: Prisma.OperatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          create: {
            args: Prisma.OperatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          createMany: {
            args: Prisma.OperatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          delete: {
            args: Prisma.OperatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          update: {
            args: Prisma.OperatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          deleteMany: {
            args: Prisma.OperatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperatorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          upsert: {
            args: Prisma.OperatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          aggregate: {
            args: Prisma.OperatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperator>
          }
          groupBy: {
            args: Prisma.OperatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatorCountArgs<ExtArgs>
            result: $Utils.Optional<OperatorCountAggregateOutputType> | number
          }
        }
      }
      WaitingList: {
        payload: Prisma.$WaitingListPayload<ExtArgs>
        fields: Prisma.WaitingListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WaitingListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WaitingListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>
          }
          findFirst: {
            args: Prisma.WaitingListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WaitingListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>
          }
          findMany: {
            args: Prisma.WaitingListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>[]
          }
          create: {
            args: Prisma.WaitingListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>
          }
          createMany: {
            args: Prisma.WaitingListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WaitingListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>[]
          }
          delete: {
            args: Prisma.WaitingListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>
          }
          update: {
            args: Prisma.WaitingListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>
          }
          deleteMany: {
            args: Prisma.WaitingListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WaitingListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WaitingListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>[]
          }
          upsert: {
            args: Prisma.WaitingListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WaitingListPayload>
          }
          aggregate: {
            args: Prisma.WaitingListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWaitingList>
          }
          groupBy: {
            args: Prisma.WaitingListGroupByArgs<ExtArgs>
            result: $Utils.Optional<WaitingListGroupByOutputType>[]
          }
          count: {
            args: Prisma.WaitingListCountArgs<ExtArgs>
            result: $Utils.Optional<WaitingListCountAggregateOutputType> | number
          }
        }
      }
      RawEventLog: {
        payload: Prisma.$RawEventLogPayload<ExtArgs>
        fields: Prisma.RawEventLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RawEventLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RawEventLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>
          }
          findFirst: {
            args: Prisma.RawEventLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RawEventLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>
          }
          findMany: {
            args: Prisma.RawEventLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>[]
          }
          create: {
            args: Prisma.RawEventLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>
          }
          createMany: {
            args: Prisma.RawEventLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RawEventLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>[]
          }
          delete: {
            args: Prisma.RawEventLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>
          }
          update: {
            args: Prisma.RawEventLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>
          }
          deleteMany: {
            args: Prisma.RawEventLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RawEventLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RawEventLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>[]
          }
          upsert: {
            args: Prisma.RawEventLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawEventLogPayload>
          }
          aggregate: {
            args: Prisma.RawEventLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRawEventLog>
          }
          groupBy: {
            args: Prisma.RawEventLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RawEventLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RawEventLogCountArgs<ExtArgs>
            result: $Utils.Optional<RawEventLogCountAggregateOutputType> | number
          }
        }
      }
      DailyUsageSummary: {
        payload: Prisma.$DailyUsageSummaryPayload<ExtArgs>
        fields: Prisma.DailyUsageSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyUsageSummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyUsageSummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>
          }
          findFirst: {
            args: Prisma.DailyUsageSummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyUsageSummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>
          }
          findMany: {
            args: Prisma.DailyUsageSummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>[]
          }
          create: {
            args: Prisma.DailyUsageSummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>
          }
          createMany: {
            args: Prisma.DailyUsageSummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyUsageSummaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>[]
          }
          delete: {
            args: Prisma.DailyUsageSummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>
          }
          update: {
            args: Prisma.DailyUsageSummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>
          }
          deleteMany: {
            args: Prisma.DailyUsageSummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyUsageSummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyUsageSummaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>[]
          }
          upsert: {
            args: Prisma.DailyUsageSummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyUsageSummaryPayload>
          }
          aggregate: {
            args: Prisma.DailyUsageSummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyUsageSummary>
          }
          groupBy: {
            args: Prisma.DailyUsageSummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyUsageSummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyUsageSummaryCountArgs<ExtArgs>
            result: $Utils.Optional<DailyUsageSummaryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    client?: ClientOmit
    equipmentType?: EquipmentTypeOmit
    equipment?: EquipmentOmit
    contract?: ContractOmit
    lineItem?: LineItemOmit
    operator?: OperatorOmit
    waitingList?: WaitingListOmit
    rawEventLog?: RawEventLogOmit
    dailyUsageSummary?: DailyUsageSummaryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    contracts: number
    dailySummaries: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | ClientCountOutputTypeCountContractsArgs
    dailySummaries?: boolean | ClientCountOutputTypeCountDailySummariesArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountDailySummariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyUsageSummaryWhereInput
  }


  /**
   * Count Type EquipmentTypeCountOutputType
   */

  export type EquipmentTypeCountOutputType = {
    equipment: number
    waitingListItems: number
  }

  export type EquipmentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentTypeCountOutputTypeCountEquipmentArgs
    waitingListItems?: boolean | EquipmentTypeCountOutputTypeCountWaitingListItemsArgs
  }

  // Custom InputTypes
  /**
   * EquipmentTypeCountOutputType without action
   */
  export type EquipmentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentTypeCountOutputType
     */
    select?: EquipmentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipmentTypeCountOutputType without action
   */
  export type EquipmentTypeCountOutputTypeCountEquipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentWhereInput
  }

  /**
   * EquipmentTypeCountOutputType without action
   */
  export type EquipmentTypeCountOutputTypeCountWaitingListItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaitingListWhereInput
  }


  /**
   * Count Type EquipmentCountOutputType
   */

  export type EquipmentCountOutputType = {
    lineItems: number
    DailyUsageSummary: number
  }

  export type EquipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lineItems?: boolean | EquipmentCountOutputTypeCountLineItemsArgs
    DailyUsageSummary?: boolean | EquipmentCountOutputTypeCountDailyUsageSummaryArgs
  }

  // Custom InputTypes
  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCountOutputType
     */
    select?: EquipmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountLineItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineItemWhereInput
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountDailyUsageSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyUsageSummaryWhereInput
  }


  /**
   * Count Type ContractCountOutputType
   */

  export type ContractCountOutputType = {
    lineItems: number
  }

  export type ContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lineItems?: boolean | ContractCountOutputTypeCountLineItemsArgs
  }

  // Custom InputTypes
  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractCountOutputType
     */
    select?: ContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountLineItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineItemWhereInput
  }


  /**
   * Count Type OperatorCountOutputType
   */

  export type OperatorCountOutputType = {
    lineItems: number
  }

  export type OperatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lineItems?: boolean | OperatorCountOutputTypeCountLineItemsArgs
  }

  // Custom InputTypes
  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorCountOutputType
     */
    select?: OperatorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeCountLineItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    clientId: string | null
    name: string | null
    email: string | null
    phone: string | null
  }

  export type ClientMaxAggregateOutputType = {
    clientId: string | null
    name: string | null
    email: string | null
    phone: string | null
  }

  export type ClientCountAggregateOutputType = {
    clientId: number
    name: number
    email: number
    phone: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    clientId?: true
    name?: true
    email?: true
    phone?: true
  }

  export type ClientMaxAggregateInputType = {
    clientId?: true
    name?: true
    email?: true
    phone?: true
  }

  export type ClientCountAggregateInputType = {
    clientId?: true
    name?: true
    email?: true
    phone?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    clientId: string
    name: string
    email: string
    phone: string | null
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clientId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    contracts?: boolean | Client$contractsArgs<ExtArgs>
    dailySummaries?: boolean | Client$dailySummariesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clientId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clientId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    clientId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"clientId" | "name" | "email" | "phone", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Client$contractsArgs<ExtArgs>
    dailySummaries?: boolean | Client$dailySummariesArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      dailySummaries: Prisma.$DailyUsageSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      clientId: string
      name: string
      email: string
      phone: string | null
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `clientId`
     * const clientWithClientIdOnly = await prisma.client.findMany({ select: { clientId: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `clientId`
     * const clientWithClientIdOnly = await prisma.client.createManyAndReturn({
     *   select: { clientId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `clientId`
     * const clientWithClientIdOnly = await prisma.client.updateManyAndReturn({
     *   select: { clientId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Client$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Client$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dailySummaries<T extends Client$dailySummariesArgs<ExtArgs> = {}>(args?: Subset<T, Client$dailySummariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly clientId: FieldRef<"Client", 'String'>
    readonly name: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly phone: FieldRef<"Client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client updateManyAndReturn
   */
  export type ClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.contracts
   */
  export type Client$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Client.dailySummaries
   */
  export type Client$dailySummariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    where?: DailyUsageSummaryWhereInput
    orderBy?: DailyUsageSummaryOrderByWithRelationInput | DailyUsageSummaryOrderByWithRelationInput[]
    cursor?: DailyUsageSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyUsageSummaryScalarFieldEnum | DailyUsageSummaryScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model EquipmentType
   */

  export type AggregateEquipmentType = {
    _count: EquipmentTypeCountAggregateOutputType | null
    _min: EquipmentTypeMinAggregateOutputType | null
    _max: EquipmentTypeMaxAggregateOutputType | null
  }

  export type EquipmentTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type EquipmentTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type EquipmentTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type EquipmentTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type EquipmentTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type EquipmentTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type EquipmentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquipmentType to aggregate.
     */
    where?: EquipmentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentTypes to fetch.
     */
    orderBy?: EquipmentTypeOrderByWithRelationInput | EquipmentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipmentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EquipmentTypes
    **/
    _count?: true | EquipmentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentTypeMaxAggregateInputType
  }

  export type GetEquipmentTypeAggregateType<T extends EquipmentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipmentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipmentType[P]>
      : GetScalarType<T[P], AggregateEquipmentType[P]>
  }




  export type EquipmentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentTypeWhereInput
    orderBy?: EquipmentTypeOrderByWithAggregationInput | EquipmentTypeOrderByWithAggregationInput[]
    by: EquipmentTypeScalarFieldEnum[] | EquipmentTypeScalarFieldEnum
    having?: EquipmentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentTypeCountAggregateInputType | true
    _min?: EquipmentTypeMinAggregateInputType
    _max?: EquipmentTypeMaxAggregateInputType
  }

  export type EquipmentTypeGroupByOutputType = {
    id: string
    name: string
    _count: EquipmentTypeCountAggregateOutputType | null
    _min: EquipmentTypeMinAggregateOutputType | null
    _max: EquipmentTypeMaxAggregateOutputType | null
  }

  type GetEquipmentTypeGroupByPayload<T extends EquipmentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipmentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentTypeGroupByOutputType[P]>
        }
      >
    >


  export type EquipmentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    equipment?: boolean | EquipmentType$equipmentArgs<ExtArgs>
    waitingListItems?: boolean | EquipmentType$waitingListItemsArgs<ExtArgs>
    _count?: boolean | EquipmentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipmentType"]>

  export type EquipmentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["equipmentType"]>

  export type EquipmentTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["equipmentType"]>

  export type EquipmentTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type EquipmentTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["equipmentType"]>
  export type EquipmentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentType$equipmentArgs<ExtArgs>
    waitingListItems?: boolean | EquipmentType$waitingListItemsArgs<ExtArgs>
    _count?: boolean | EquipmentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipmentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EquipmentTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EquipmentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EquipmentType"
    objects: {
      equipment: Prisma.$EquipmentPayload<ExtArgs>[]
      waitingListItems: Prisma.$WaitingListPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["equipmentType"]>
    composites: {}
  }

  type EquipmentTypeGetPayload<S extends boolean | null | undefined | EquipmentTypeDefaultArgs> = $Result.GetResult<Prisma.$EquipmentTypePayload, S>

  type EquipmentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipmentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipmentTypeCountAggregateInputType | true
    }

  export interface EquipmentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EquipmentType'], meta: { name: 'EquipmentType' } }
    /**
     * Find zero or one EquipmentType that matches the filter.
     * @param {EquipmentTypeFindUniqueArgs} args - Arguments to find a EquipmentType
     * @example
     * // Get one EquipmentType
     * const equipmentType = await prisma.equipmentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipmentTypeFindUniqueArgs>(args: SelectSubset<T, EquipmentTypeFindUniqueArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EquipmentType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipmentTypeFindUniqueOrThrowArgs} args - Arguments to find a EquipmentType
     * @example
     * // Get one EquipmentType
     * const equipmentType = await prisma.equipmentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipmentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipmentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquipmentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeFindFirstArgs} args - Arguments to find a EquipmentType
     * @example
     * // Get one EquipmentType
     * const equipmentType = await prisma.equipmentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipmentTypeFindFirstArgs>(args?: SelectSubset<T, EquipmentTypeFindFirstArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EquipmentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeFindFirstOrThrowArgs} args - Arguments to find a EquipmentType
     * @example
     * // Get one EquipmentType
     * const equipmentType = await prisma.equipmentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipmentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipmentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EquipmentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EquipmentTypes
     * const equipmentTypes = await prisma.equipmentType.findMany()
     * 
     * // Get first 10 EquipmentTypes
     * const equipmentTypes = await prisma.equipmentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipmentTypeWithIdOnly = await prisma.equipmentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EquipmentTypeFindManyArgs>(args?: SelectSubset<T, EquipmentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EquipmentType.
     * @param {EquipmentTypeCreateArgs} args - Arguments to create a EquipmentType.
     * @example
     * // Create one EquipmentType
     * const EquipmentType = await prisma.equipmentType.create({
     *   data: {
     *     // ... data to create a EquipmentType
     *   }
     * })
     * 
     */
    create<T extends EquipmentTypeCreateArgs>(args: SelectSubset<T, EquipmentTypeCreateArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EquipmentTypes.
     * @param {EquipmentTypeCreateManyArgs} args - Arguments to create many EquipmentTypes.
     * @example
     * // Create many EquipmentTypes
     * const equipmentType = await prisma.equipmentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipmentTypeCreateManyArgs>(args?: SelectSubset<T, EquipmentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EquipmentTypes and returns the data saved in the database.
     * @param {EquipmentTypeCreateManyAndReturnArgs} args - Arguments to create many EquipmentTypes.
     * @example
     * // Create many EquipmentTypes
     * const equipmentType = await prisma.equipmentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EquipmentTypes and only return the `id`
     * const equipmentTypeWithIdOnly = await prisma.equipmentType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipmentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipmentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EquipmentType.
     * @param {EquipmentTypeDeleteArgs} args - Arguments to delete one EquipmentType.
     * @example
     * // Delete one EquipmentType
     * const EquipmentType = await prisma.equipmentType.delete({
     *   where: {
     *     // ... filter to delete one EquipmentType
     *   }
     * })
     * 
     */
    delete<T extends EquipmentTypeDeleteArgs>(args: SelectSubset<T, EquipmentTypeDeleteArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EquipmentType.
     * @param {EquipmentTypeUpdateArgs} args - Arguments to update one EquipmentType.
     * @example
     * // Update one EquipmentType
     * const equipmentType = await prisma.equipmentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipmentTypeUpdateArgs>(args: SelectSubset<T, EquipmentTypeUpdateArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EquipmentTypes.
     * @param {EquipmentTypeDeleteManyArgs} args - Arguments to filter EquipmentTypes to delete.
     * @example
     * // Delete a few EquipmentTypes
     * const { count } = await prisma.equipmentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipmentTypeDeleteManyArgs>(args?: SelectSubset<T, EquipmentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquipmentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EquipmentTypes
     * const equipmentType = await prisma.equipmentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipmentTypeUpdateManyArgs>(args: SelectSubset<T, EquipmentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EquipmentTypes and returns the data updated in the database.
     * @param {EquipmentTypeUpdateManyAndReturnArgs} args - Arguments to update many EquipmentTypes.
     * @example
     * // Update many EquipmentTypes
     * const equipmentType = await prisma.equipmentType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EquipmentTypes and only return the `id`
     * const equipmentTypeWithIdOnly = await prisma.equipmentType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipmentTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipmentTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EquipmentType.
     * @param {EquipmentTypeUpsertArgs} args - Arguments to update or create a EquipmentType.
     * @example
     * // Update or create a EquipmentType
     * const equipmentType = await prisma.equipmentType.upsert({
     *   create: {
     *     // ... data to create a EquipmentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EquipmentType we want to update
     *   }
     * })
     */
    upsert<T extends EquipmentTypeUpsertArgs>(args: SelectSubset<T, EquipmentTypeUpsertArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EquipmentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeCountArgs} args - Arguments to filter EquipmentTypes to count.
     * @example
     * // Count the number of EquipmentTypes
     * const count = await prisma.equipmentType.count({
     *   where: {
     *     // ... the filter for the EquipmentTypes we want to count
     *   }
     * })
    **/
    count<T extends EquipmentTypeCountArgs>(
      args?: Subset<T, EquipmentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EquipmentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentTypeAggregateArgs>(args: Subset<T, EquipmentTypeAggregateArgs>): Prisma.PrismaPromise<GetEquipmentTypeAggregateType<T>>

    /**
     * Group by EquipmentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipmentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipmentTypeGroupByArgs['orderBy'] }
        : { orderBy?: EquipmentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipmentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EquipmentType model
   */
  readonly fields: EquipmentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EquipmentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipmentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipment<T extends EquipmentType$equipmentArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentType$equipmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    waitingListItems<T extends EquipmentType$waitingListItemsArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentType$waitingListItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EquipmentType model
   */
  interface EquipmentTypeFieldRefs {
    readonly id: FieldRef<"EquipmentType", 'String'>
    readonly name: FieldRef<"EquipmentType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EquipmentType findUnique
   */
  export type EquipmentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentType to fetch.
     */
    where: EquipmentTypeWhereUniqueInput
  }

  /**
   * EquipmentType findUniqueOrThrow
   */
  export type EquipmentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentType to fetch.
     */
    where: EquipmentTypeWhereUniqueInput
  }

  /**
   * EquipmentType findFirst
   */
  export type EquipmentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentType to fetch.
     */
    where?: EquipmentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentTypes to fetch.
     */
    orderBy?: EquipmentTypeOrderByWithRelationInput | EquipmentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquipmentTypes.
     */
    cursor?: EquipmentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquipmentTypes.
     */
    distinct?: EquipmentTypeScalarFieldEnum | EquipmentTypeScalarFieldEnum[]
  }

  /**
   * EquipmentType findFirstOrThrow
   */
  export type EquipmentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentType to fetch.
     */
    where?: EquipmentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentTypes to fetch.
     */
    orderBy?: EquipmentTypeOrderByWithRelationInput | EquipmentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EquipmentTypes.
     */
    cursor?: EquipmentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EquipmentTypes.
     */
    distinct?: EquipmentTypeScalarFieldEnum | EquipmentTypeScalarFieldEnum[]
  }

  /**
   * EquipmentType findMany
   */
  export type EquipmentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * Filter, which EquipmentTypes to fetch.
     */
    where?: EquipmentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EquipmentTypes to fetch.
     */
    orderBy?: EquipmentTypeOrderByWithRelationInput | EquipmentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EquipmentTypes.
     */
    cursor?: EquipmentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EquipmentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EquipmentTypes.
     */
    skip?: number
    distinct?: EquipmentTypeScalarFieldEnum | EquipmentTypeScalarFieldEnum[]
  }

  /**
   * EquipmentType create
   */
  export type EquipmentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a EquipmentType.
     */
    data: XOR<EquipmentTypeCreateInput, EquipmentTypeUncheckedCreateInput>
  }

  /**
   * EquipmentType createMany
   */
  export type EquipmentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EquipmentTypes.
     */
    data: EquipmentTypeCreateManyInput | EquipmentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EquipmentType createManyAndReturn
   */
  export type EquipmentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * The data used to create many EquipmentTypes.
     */
    data: EquipmentTypeCreateManyInput | EquipmentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EquipmentType update
   */
  export type EquipmentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a EquipmentType.
     */
    data: XOR<EquipmentTypeUpdateInput, EquipmentTypeUncheckedUpdateInput>
    /**
     * Choose, which EquipmentType to update.
     */
    where: EquipmentTypeWhereUniqueInput
  }

  /**
   * EquipmentType updateMany
   */
  export type EquipmentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EquipmentTypes.
     */
    data: XOR<EquipmentTypeUpdateManyMutationInput, EquipmentTypeUncheckedUpdateManyInput>
    /**
     * Filter which EquipmentTypes to update
     */
    where?: EquipmentTypeWhereInput
    /**
     * Limit how many EquipmentTypes to update.
     */
    limit?: number
  }

  /**
   * EquipmentType updateManyAndReturn
   */
  export type EquipmentTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * The data used to update EquipmentTypes.
     */
    data: XOR<EquipmentTypeUpdateManyMutationInput, EquipmentTypeUncheckedUpdateManyInput>
    /**
     * Filter which EquipmentTypes to update
     */
    where?: EquipmentTypeWhereInput
    /**
     * Limit how many EquipmentTypes to update.
     */
    limit?: number
  }

  /**
   * EquipmentType upsert
   */
  export type EquipmentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the EquipmentType to update in case it exists.
     */
    where: EquipmentTypeWhereUniqueInput
    /**
     * In case the EquipmentType found by the `where` argument doesn't exist, create a new EquipmentType with this data.
     */
    create: XOR<EquipmentTypeCreateInput, EquipmentTypeUncheckedCreateInput>
    /**
     * In case the EquipmentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipmentTypeUpdateInput, EquipmentTypeUncheckedUpdateInput>
  }

  /**
   * EquipmentType delete
   */
  export type EquipmentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
    /**
     * Filter which EquipmentType to delete.
     */
    where: EquipmentTypeWhereUniqueInput
  }

  /**
   * EquipmentType deleteMany
   */
  export type EquipmentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EquipmentTypes to delete
     */
    where?: EquipmentTypeWhereInput
    /**
     * Limit how many EquipmentTypes to delete.
     */
    limit?: number
  }

  /**
   * EquipmentType.equipment
   */
  export type EquipmentType$equipmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    where?: EquipmentWhereInput
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    cursor?: EquipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * EquipmentType.waitingListItems
   */
  export type EquipmentType$waitingListItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    where?: WaitingListWhereInput
    orderBy?: WaitingListOrderByWithRelationInput | WaitingListOrderByWithRelationInput[]
    cursor?: WaitingListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WaitingListScalarFieldEnum | WaitingListScalarFieldEnum[]
  }

  /**
   * EquipmentType without action
   */
  export type EquipmentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentType
     */
    select?: EquipmentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EquipmentType
     */
    omit?: EquipmentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentTypeInclude<ExtArgs> | null
  }


  /**
   * Model Equipment
   */

  export type AggregateEquipment = {
    _count: EquipmentCountAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  export type EquipmentMinAggregateOutputType = {
    equipmentId: string | null
    status: string | null
    equipmentTypeId: string | null
  }

  export type EquipmentMaxAggregateOutputType = {
    equipmentId: string | null
    status: string | null
    equipmentTypeId: string | null
  }

  export type EquipmentCountAggregateOutputType = {
    equipmentId: number
    status: number
    equipmentTypeId: number
    _all: number
  }


  export type EquipmentMinAggregateInputType = {
    equipmentId?: true
    status?: true
    equipmentTypeId?: true
  }

  export type EquipmentMaxAggregateInputType = {
    equipmentId?: true
    status?: true
    equipmentTypeId?: true
  }

  export type EquipmentCountAggregateInputType = {
    equipmentId?: true
    status?: true
    equipmentTypeId?: true
    _all?: true
  }

  export type EquipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipment to aggregate.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipment
    **/
    _count?: true | EquipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentMaxAggregateInputType
  }

  export type GetEquipmentAggregateType<T extends EquipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipment[P]>
      : GetScalarType<T[P], AggregateEquipment[P]>
  }




  export type EquipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipmentWhereInput
    orderBy?: EquipmentOrderByWithAggregationInput | EquipmentOrderByWithAggregationInput[]
    by: EquipmentScalarFieldEnum[] | EquipmentScalarFieldEnum
    having?: EquipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentCountAggregateInputType | true
    _min?: EquipmentMinAggregateInputType
    _max?: EquipmentMaxAggregateInputType
  }

  export type EquipmentGroupByOutputType = {
    equipmentId: string
    status: string
    equipmentTypeId: string
    _count: EquipmentCountAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  type GetEquipmentGroupByPayload<T extends EquipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
        }
      >
    >


  export type EquipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    equipmentId?: boolean
    status?: boolean
    equipmentTypeId?: boolean
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
    lineItems?: boolean | Equipment$lineItemsArgs<ExtArgs>
    DailyUsageSummary?: boolean | Equipment$DailyUsageSummaryArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    equipmentId?: boolean
    status?: boolean
    equipmentTypeId?: boolean
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    equipmentId?: boolean
    status?: boolean
    equipmentTypeId?: boolean
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipment"]>

  export type EquipmentSelectScalar = {
    equipmentId?: boolean
    status?: boolean
    equipmentTypeId?: boolean
  }

  export type EquipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"equipmentId" | "status" | "equipmentTypeId", ExtArgs["result"]["equipment"]>
  export type EquipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
    lineItems?: boolean | Equipment$lineItemsArgs<ExtArgs>
    DailyUsageSummary?: boolean | Equipment$DailyUsageSummaryArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EquipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }
  export type EquipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }

  export type $EquipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipment"
    objects: {
      equipmentType: Prisma.$EquipmentTypePayload<ExtArgs>
      lineItems: Prisma.$LineItemPayload<ExtArgs>[]
      DailyUsageSummary: Prisma.$DailyUsageSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      equipmentId: string
      status: string
      equipmentTypeId: string
    }, ExtArgs["result"]["equipment"]>
    composites: {}
  }

  type EquipmentGetPayload<S extends boolean | null | undefined | EquipmentDefaultArgs> = $Result.GetResult<Prisma.$EquipmentPayload, S>

  type EquipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EquipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipmentCountAggregateInputType | true
    }

  export interface EquipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipment'], meta: { name: 'Equipment' } }
    /**
     * Find zero or one Equipment that matches the filter.
     * @param {EquipmentFindUniqueArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EquipmentFindUniqueArgs>(args: SelectSubset<T, EquipmentFindUniqueArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Equipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EquipmentFindUniqueOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EquipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EquipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindFirstArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EquipmentFindFirstArgs>(args?: SelectSubset<T, EquipmentFindFirstArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Equipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindFirstOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EquipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EquipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipment
     * const equipment = await prisma.equipment.findMany()
     * 
     * // Get first 10 Equipment
     * const equipment = await prisma.equipment.findMany({ take: 10 })
     * 
     * // Only select the `equipmentId`
     * const equipmentWithEquipmentIdOnly = await prisma.equipment.findMany({ select: { equipmentId: true } })
     * 
     */
    findMany<T extends EquipmentFindManyArgs>(args?: SelectSubset<T, EquipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Equipment.
     * @param {EquipmentCreateArgs} args - Arguments to create a Equipment.
     * @example
     * // Create one Equipment
     * const Equipment = await prisma.equipment.create({
     *   data: {
     *     // ... data to create a Equipment
     *   }
     * })
     * 
     */
    create<T extends EquipmentCreateArgs>(args: SelectSubset<T, EquipmentCreateArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Equipment.
     * @param {EquipmentCreateManyArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EquipmentCreateManyArgs>(args?: SelectSubset<T, EquipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipment and returns the data saved in the database.
     * @param {EquipmentCreateManyAndReturnArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipment and only return the `equipmentId`
     * const equipmentWithEquipmentIdOnly = await prisma.equipment.createManyAndReturn({
     *   select: { equipmentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EquipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EquipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Equipment.
     * @param {EquipmentDeleteArgs} args - Arguments to delete one Equipment.
     * @example
     * // Delete one Equipment
     * const Equipment = await prisma.equipment.delete({
     *   where: {
     *     // ... filter to delete one Equipment
     *   }
     * })
     * 
     */
    delete<T extends EquipmentDeleteArgs>(args: SelectSubset<T, EquipmentDeleteArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Equipment.
     * @param {EquipmentUpdateArgs} args - Arguments to update one Equipment.
     * @example
     * // Update one Equipment
     * const equipment = await prisma.equipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EquipmentUpdateArgs>(args: SelectSubset<T, EquipmentUpdateArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Equipment.
     * @param {EquipmentDeleteManyArgs} args - Arguments to filter Equipment to delete.
     * @example
     * // Delete a few Equipment
     * const { count } = await prisma.equipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EquipmentDeleteManyArgs>(args?: SelectSubset<T, EquipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EquipmentUpdateManyArgs>(args: SelectSubset<T, EquipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment and returns the data updated in the database.
     * @param {EquipmentUpdateManyAndReturnArgs} args - Arguments to update many Equipment.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipment and only return the `equipmentId`
     * const equipmentWithEquipmentIdOnly = await prisma.equipment.updateManyAndReturn({
     *   select: { equipmentId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EquipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, EquipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Equipment.
     * @param {EquipmentUpsertArgs} args - Arguments to update or create a Equipment.
     * @example
     * // Update or create a Equipment
     * const equipment = await prisma.equipment.upsert({
     *   create: {
     *     // ... data to create a Equipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipment we want to update
     *   }
     * })
     */
    upsert<T extends EquipmentUpsertArgs>(args: SelectSubset<T, EquipmentUpsertArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentCountArgs} args - Arguments to filter Equipment to count.
     * @example
     * // Count the number of Equipment
     * const count = await prisma.equipment.count({
     *   where: {
     *     // ... the filter for the Equipment we want to count
     *   }
     * })
    **/
    count<T extends EquipmentCountArgs>(
      args?: Subset<T, EquipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentAggregateArgs>(args: Subset<T, EquipmentAggregateArgs>): Prisma.PrismaPromise<GetEquipmentAggregateType<T>>

    /**
     * Group by Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipmentGroupByArgs['orderBy'] }
        : { orderBy?: EquipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipment model
   */
  readonly fields: EquipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipmentType<T extends EquipmentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentTypeDefaultArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lineItems<T extends Equipment$lineItemsArgs<ExtArgs> = {}>(args?: Subset<T, Equipment$lineItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DailyUsageSummary<T extends Equipment$DailyUsageSummaryArgs<ExtArgs> = {}>(args?: Subset<T, Equipment$DailyUsageSummaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Equipment model
   */
  interface EquipmentFieldRefs {
    readonly equipmentId: FieldRef<"Equipment", 'String'>
    readonly status: FieldRef<"Equipment", 'String'>
    readonly equipmentTypeId: FieldRef<"Equipment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Equipment findUnique
   */
  export type EquipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment findUniqueOrThrow
   */
  export type EquipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment findFirst
   */
  export type EquipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Equipment findFirstOrThrow
   */
  export type EquipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Equipment findMany
   */
  export type EquipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter, which Equipment to fetch.
     */
    where?: EquipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipment to fetch.
     */
    orderBy?: EquipmentOrderByWithRelationInput | EquipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipment.
     */
    cursor?: EquipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipment.
     */
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * Equipment create
   */
  export type EquipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipment.
     */
    data: XOR<EquipmentCreateInput, EquipmentUncheckedCreateInput>
  }

  /**
   * Equipment createMany
   */
  export type EquipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipment.
     */
    data: EquipmentCreateManyInput | EquipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipment createManyAndReturn
   */
  export type EquipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * The data used to create many Equipment.
     */
    data: EquipmentCreateManyInput | EquipmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Equipment update
   */
  export type EquipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipment.
     */
    data: XOR<EquipmentUpdateInput, EquipmentUncheckedUpdateInput>
    /**
     * Choose, which Equipment to update.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment updateMany
   */
  export type EquipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipment.
     */
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyInput>
    /**
     * Filter which Equipment to update
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to update.
     */
    limit?: number
  }

  /**
   * Equipment updateManyAndReturn
   */
  export type EquipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * The data used to update Equipment.
     */
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyInput>
    /**
     * Filter which Equipment to update
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Equipment upsert
   */
  export type EquipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipment to update in case it exists.
     */
    where: EquipmentWhereUniqueInput
    /**
     * In case the Equipment found by the `where` argument doesn't exist, create a new Equipment with this data.
     */
    create: XOR<EquipmentCreateInput, EquipmentUncheckedCreateInput>
    /**
     * In case the Equipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipmentUpdateInput, EquipmentUncheckedUpdateInput>
  }

  /**
   * Equipment delete
   */
  export type EquipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
    /**
     * Filter which Equipment to delete.
     */
    where: EquipmentWhereUniqueInput
  }

  /**
   * Equipment deleteMany
   */
  export type EquipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipment to delete
     */
    where?: EquipmentWhereInput
    /**
     * Limit how many Equipment to delete.
     */
    limit?: number
  }

  /**
   * Equipment.lineItems
   */
  export type Equipment$lineItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    where?: LineItemWhereInput
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    cursor?: LineItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LineItemScalarFieldEnum | LineItemScalarFieldEnum[]
  }

  /**
   * Equipment.DailyUsageSummary
   */
  export type Equipment$DailyUsageSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    where?: DailyUsageSummaryWhereInput
    orderBy?: DailyUsageSummaryOrderByWithRelationInput | DailyUsageSummaryOrderByWithRelationInput[]
    cursor?: DailyUsageSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyUsageSummaryScalarFieldEnum | DailyUsageSummaryScalarFieldEnum[]
  }

  /**
   * Equipment without action
   */
  export type EquipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipment
     */
    select?: EquipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Equipment
     */
    omit?: EquipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipmentInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractMinAggregateOutputType = {
    contractId: string | null
    siteId: string | null
    startDate: Date | null
    endDate: Date | null
    clientId: string | null
  }

  export type ContractMaxAggregateOutputType = {
    contractId: string | null
    siteId: string | null
    startDate: Date | null
    endDate: Date | null
    clientId: string | null
  }

  export type ContractCountAggregateOutputType = {
    contractId: number
    siteId: number
    startDate: number
    endDate: number
    clientId: number
    _all: number
  }


  export type ContractMinAggregateInputType = {
    contractId?: true
    siteId?: true
    startDate?: true
    endDate?: true
    clientId?: true
  }

  export type ContractMaxAggregateInputType = {
    contractId?: true
    siteId?: true
    startDate?: true
    endDate?: true
    clientId?: true
  }

  export type ContractCountAggregateInputType = {
    contractId?: true
    siteId?: true
    startDate?: true
    endDate?: true
    clientId?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    contractId: string
    siteId: string
    startDate: Date
    endDate: Date
    clientId: string
    _count: ContractCountAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contractId?: boolean
    siteId?: boolean
    startDate?: boolean
    endDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    lineItems?: boolean | Contract$lineItemsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contractId?: boolean
    siteId?: boolean
    startDate?: boolean
    endDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contractId?: boolean
    siteId?: boolean
    startDate?: boolean
    endDate?: boolean
    clientId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectScalar = {
    contractId?: boolean
    siteId?: boolean
    startDate?: boolean
    endDate?: boolean
    clientId?: boolean
  }

  export type ContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"contractId" | "siteId" | "startDate" | "endDate" | "clientId", ExtArgs["result"]["contract"]>
  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    lineItems?: boolean | Contract$lineItemsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ContractIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      lineItems: Prisma.$LineItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      contractId: string
      siteId: string
      startDate: Date
      endDate: Date
      clientId: string
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `contractId`
     * const contractWithContractIdOnly = await prisma.contract.findMany({ select: { contractId: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `contractId`
     * const contractWithContractIdOnly = await prisma.contract.createManyAndReturn({
     *   select: { contractId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts and returns the data updated in the database.
     * @param {ContractUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contracts and only return the `contractId`
     * const contractWithContractIdOnly = await prisma.contract.updateManyAndReturn({
     *   select: { contractId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lineItems<T extends Contract$lineItemsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$lineItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */
  interface ContractFieldRefs {
    readonly contractId: FieldRef<"Contract", 'String'>
    readonly siteId: FieldRef<"Contract", 'String'>
    readonly startDate: FieldRef<"Contract", 'DateTime'>
    readonly endDate: FieldRef<"Contract", 'DateTime'>
    readonly clientId: FieldRef<"Contract", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract createManyAndReturn
   */
  export type ContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
  }

  /**
   * Contract updateManyAndReturn
   */
  export type ContractUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to delete.
     */
    limit?: number
  }

  /**
   * Contract.lineItems
   */
  export type Contract$lineItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    where?: LineItemWhereInput
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    cursor?: LineItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LineItemScalarFieldEnum | LineItemScalarFieldEnum[]
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model LineItem
   */

  export type AggregateLineItem = {
    _count: LineItemCountAggregateOutputType | null
    _avg: LineItemAvgAggregateOutputType | null
    _sum: LineItemSumAggregateOutputType | null
    _min: LineItemMinAggregateOutputType | null
    _max: LineItemMaxAggregateOutputType | null
  }

  export type LineItemAvgAggregateOutputType = {
    totalEngineHours: number | null
    fuelUsage: number | null
    downtimeHours: number | null
    operatingDays: number | null
  }

  export type LineItemSumAggregateOutputType = {
    totalEngineHours: number | null
    fuelUsage: number | null
    downtimeHours: number | null
    operatingDays: number | null
  }

  export type LineItemMinAggregateOutputType = {
    lineItemId: string | null
    startDate: Date | null
    endDate: Date | null
    totalEngineHours: number | null
    fuelUsage: number | null
    downtimeHours: number | null
    operatingDays: number | null
    contractId: string | null
    equipmentId: string | null
    lastOperatorId: string | null
  }

  export type LineItemMaxAggregateOutputType = {
    lineItemId: string | null
    startDate: Date | null
    endDate: Date | null
    totalEngineHours: number | null
    fuelUsage: number | null
    downtimeHours: number | null
    operatingDays: number | null
    contractId: string | null
    equipmentId: string | null
    lastOperatorId: string | null
  }

  export type LineItemCountAggregateOutputType = {
    lineItemId: number
    startDate: number
    endDate: number
    totalEngineHours: number
    fuelUsage: number
    downtimeHours: number
    operatingDays: number
    contractId: number
    equipmentId: number
    lastOperatorId: number
    _all: number
  }


  export type LineItemAvgAggregateInputType = {
    totalEngineHours?: true
    fuelUsage?: true
    downtimeHours?: true
    operatingDays?: true
  }

  export type LineItemSumAggregateInputType = {
    totalEngineHours?: true
    fuelUsage?: true
    downtimeHours?: true
    operatingDays?: true
  }

  export type LineItemMinAggregateInputType = {
    lineItemId?: true
    startDate?: true
    endDate?: true
    totalEngineHours?: true
    fuelUsage?: true
    downtimeHours?: true
    operatingDays?: true
    contractId?: true
    equipmentId?: true
    lastOperatorId?: true
  }

  export type LineItemMaxAggregateInputType = {
    lineItemId?: true
    startDate?: true
    endDate?: true
    totalEngineHours?: true
    fuelUsage?: true
    downtimeHours?: true
    operatingDays?: true
    contractId?: true
    equipmentId?: true
    lastOperatorId?: true
  }

  export type LineItemCountAggregateInputType = {
    lineItemId?: true
    startDate?: true
    endDate?: true
    totalEngineHours?: true
    fuelUsage?: true
    downtimeHours?: true
    operatingDays?: true
    contractId?: true
    equipmentId?: true
    lastOperatorId?: true
    _all?: true
  }

  export type LineItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LineItem to aggregate.
     */
    where?: LineItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineItems to fetch.
     */
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LineItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LineItems
    **/
    _count?: true | LineItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LineItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LineItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LineItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LineItemMaxAggregateInputType
  }

  export type GetLineItemAggregateType<T extends LineItemAggregateArgs> = {
        [P in keyof T & keyof AggregateLineItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLineItem[P]>
      : GetScalarType<T[P], AggregateLineItem[P]>
  }




  export type LineItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LineItemWhereInput
    orderBy?: LineItemOrderByWithAggregationInput | LineItemOrderByWithAggregationInput[]
    by: LineItemScalarFieldEnum[] | LineItemScalarFieldEnum
    having?: LineItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LineItemCountAggregateInputType | true
    _avg?: LineItemAvgAggregateInputType
    _sum?: LineItemSumAggregateInputType
    _min?: LineItemMinAggregateInputType
    _max?: LineItemMaxAggregateInputType
  }

  export type LineItemGroupByOutputType = {
    lineItemId: string
    startDate: Date
    endDate: Date
    totalEngineHours: number | null
    fuelUsage: number | null
    downtimeHours: number | null
    operatingDays: number | null
    contractId: string
    equipmentId: string
    lastOperatorId: string | null
    _count: LineItemCountAggregateOutputType | null
    _avg: LineItemAvgAggregateOutputType | null
    _sum: LineItemSumAggregateOutputType | null
    _min: LineItemMinAggregateOutputType | null
    _max: LineItemMaxAggregateOutputType | null
  }

  type GetLineItemGroupByPayload<T extends LineItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LineItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LineItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LineItemGroupByOutputType[P]>
            : GetScalarType<T[P], LineItemGroupByOutputType[P]>
        }
      >
    >


  export type LineItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lineItemId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalEngineHours?: boolean
    fuelUsage?: boolean
    downtimeHours?: boolean
    operatingDays?: boolean
    contractId?: boolean
    equipmentId?: boolean
    lastOperatorId?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    operator?: boolean | LineItem$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["lineItem"]>

  export type LineItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lineItemId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalEngineHours?: boolean
    fuelUsage?: boolean
    downtimeHours?: boolean
    operatingDays?: boolean
    contractId?: boolean
    equipmentId?: boolean
    lastOperatorId?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    operator?: boolean | LineItem$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["lineItem"]>

  export type LineItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lineItemId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalEngineHours?: boolean
    fuelUsage?: boolean
    downtimeHours?: boolean
    operatingDays?: boolean
    contractId?: boolean
    equipmentId?: boolean
    lastOperatorId?: boolean
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    operator?: boolean | LineItem$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["lineItem"]>

  export type LineItemSelectScalar = {
    lineItemId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalEngineHours?: boolean
    fuelUsage?: boolean
    downtimeHours?: boolean
    operatingDays?: boolean
    contractId?: boolean
    equipmentId?: boolean
    lastOperatorId?: boolean
  }

  export type LineItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"lineItemId" | "startDate" | "endDate" | "totalEngineHours" | "fuelUsage" | "downtimeHours" | "operatingDays" | "contractId" | "equipmentId" | "lastOperatorId", ExtArgs["result"]["lineItem"]>
  export type LineItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    operator?: boolean | LineItem$operatorArgs<ExtArgs>
  }
  export type LineItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    operator?: boolean | LineItem$operatorArgs<ExtArgs>
  }
  export type LineItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    operator?: boolean | LineItem$operatorArgs<ExtArgs>
  }

  export type $LineItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LineItem"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs>
      equipment: Prisma.$EquipmentPayload<ExtArgs>
      operator: Prisma.$OperatorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      lineItemId: string
      startDate: Date
      endDate: Date
      totalEngineHours: number | null
      fuelUsage: number | null
      downtimeHours: number | null
      operatingDays: number | null
      contractId: string
      equipmentId: string
      lastOperatorId: string | null
    }, ExtArgs["result"]["lineItem"]>
    composites: {}
  }

  type LineItemGetPayload<S extends boolean | null | undefined | LineItemDefaultArgs> = $Result.GetResult<Prisma.$LineItemPayload, S>

  type LineItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LineItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LineItemCountAggregateInputType | true
    }

  export interface LineItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LineItem'], meta: { name: 'LineItem' } }
    /**
     * Find zero or one LineItem that matches the filter.
     * @param {LineItemFindUniqueArgs} args - Arguments to find a LineItem
     * @example
     * // Get one LineItem
     * const lineItem = await prisma.lineItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LineItemFindUniqueArgs>(args: SelectSubset<T, LineItemFindUniqueArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LineItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LineItemFindUniqueOrThrowArgs} args - Arguments to find a LineItem
     * @example
     * // Get one LineItem
     * const lineItem = await prisma.lineItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LineItemFindUniqueOrThrowArgs>(args: SelectSubset<T, LineItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LineItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemFindFirstArgs} args - Arguments to find a LineItem
     * @example
     * // Get one LineItem
     * const lineItem = await prisma.lineItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LineItemFindFirstArgs>(args?: SelectSubset<T, LineItemFindFirstArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LineItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemFindFirstOrThrowArgs} args - Arguments to find a LineItem
     * @example
     * // Get one LineItem
     * const lineItem = await prisma.lineItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LineItemFindFirstOrThrowArgs>(args?: SelectSubset<T, LineItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LineItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LineItems
     * const lineItems = await prisma.lineItem.findMany()
     * 
     * // Get first 10 LineItems
     * const lineItems = await prisma.lineItem.findMany({ take: 10 })
     * 
     * // Only select the `lineItemId`
     * const lineItemWithLineItemIdOnly = await prisma.lineItem.findMany({ select: { lineItemId: true } })
     * 
     */
    findMany<T extends LineItemFindManyArgs>(args?: SelectSubset<T, LineItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LineItem.
     * @param {LineItemCreateArgs} args - Arguments to create a LineItem.
     * @example
     * // Create one LineItem
     * const LineItem = await prisma.lineItem.create({
     *   data: {
     *     // ... data to create a LineItem
     *   }
     * })
     * 
     */
    create<T extends LineItemCreateArgs>(args: SelectSubset<T, LineItemCreateArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LineItems.
     * @param {LineItemCreateManyArgs} args - Arguments to create many LineItems.
     * @example
     * // Create many LineItems
     * const lineItem = await prisma.lineItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LineItemCreateManyArgs>(args?: SelectSubset<T, LineItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LineItems and returns the data saved in the database.
     * @param {LineItemCreateManyAndReturnArgs} args - Arguments to create many LineItems.
     * @example
     * // Create many LineItems
     * const lineItem = await prisma.lineItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LineItems and only return the `lineItemId`
     * const lineItemWithLineItemIdOnly = await prisma.lineItem.createManyAndReturn({
     *   select: { lineItemId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LineItemCreateManyAndReturnArgs>(args?: SelectSubset<T, LineItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LineItem.
     * @param {LineItemDeleteArgs} args - Arguments to delete one LineItem.
     * @example
     * // Delete one LineItem
     * const LineItem = await prisma.lineItem.delete({
     *   where: {
     *     // ... filter to delete one LineItem
     *   }
     * })
     * 
     */
    delete<T extends LineItemDeleteArgs>(args: SelectSubset<T, LineItemDeleteArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LineItem.
     * @param {LineItemUpdateArgs} args - Arguments to update one LineItem.
     * @example
     * // Update one LineItem
     * const lineItem = await prisma.lineItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LineItemUpdateArgs>(args: SelectSubset<T, LineItemUpdateArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LineItems.
     * @param {LineItemDeleteManyArgs} args - Arguments to filter LineItems to delete.
     * @example
     * // Delete a few LineItems
     * const { count } = await prisma.lineItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LineItemDeleteManyArgs>(args?: SelectSubset<T, LineItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LineItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LineItems
     * const lineItem = await prisma.lineItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LineItemUpdateManyArgs>(args: SelectSubset<T, LineItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LineItems and returns the data updated in the database.
     * @param {LineItemUpdateManyAndReturnArgs} args - Arguments to update many LineItems.
     * @example
     * // Update many LineItems
     * const lineItem = await prisma.lineItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LineItems and only return the `lineItemId`
     * const lineItemWithLineItemIdOnly = await prisma.lineItem.updateManyAndReturn({
     *   select: { lineItemId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LineItemUpdateManyAndReturnArgs>(args: SelectSubset<T, LineItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LineItem.
     * @param {LineItemUpsertArgs} args - Arguments to update or create a LineItem.
     * @example
     * // Update or create a LineItem
     * const lineItem = await prisma.lineItem.upsert({
     *   create: {
     *     // ... data to create a LineItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LineItem we want to update
     *   }
     * })
     */
    upsert<T extends LineItemUpsertArgs>(args: SelectSubset<T, LineItemUpsertArgs<ExtArgs>>): Prisma__LineItemClient<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LineItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemCountArgs} args - Arguments to filter LineItems to count.
     * @example
     * // Count the number of LineItems
     * const count = await prisma.lineItem.count({
     *   where: {
     *     // ... the filter for the LineItems we want to count
     *   }
     * })
    **/
    count<T extends LineItemCountArgs>(
      args?: Subset<T, LineItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LineItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LineItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LineItemAggregateArgs>(args: Subset<T, LineItemAggregateArgs>): Prisma.PrismaPromise<GetLineItemAggregateType<T>>

    /**
     * Group by LineItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LineItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LineItemGroupByArgs['orderBy'] }
        : { orderBy?: LineItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LineItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLineItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LineItem model
   */
  readonly fields: LineItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LineItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LineItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    equipment<T extends EquipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentDefaultArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    operator<T extends LineItem$operatorArgs<ExtArgs> = {}>(args?: Subset<T, LineItem$operatorArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LineItem model
   */
  interface LineItemFieldRefs {
    readonly lineItemId: FieldRef<"LineItem", 'String'>
    readonly startDate: FieldRef<"LineItem", 'DateTime'>
    readonly endDate: FieldRef<"LineItem", 'DateTime'>
    readonly totalEngineHours: FieldRef<"LineItem", 'Float'>
    readonly fuelUsage: FieldRef<"LineItem", 'Float'>
    readonly downtimeHours: FieldRef<"LineItem", 'Float'>
    readonly operatingDays: FieldRef<"LineItem", 'Int'>
    readonly contractId: FieldRef<"LineItem", 'String'>
    readonly equipmentId: FieldRef<"LineItem", 'String'>
    readonly lastOperatorId: FieldRef<"LineItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LineItem findUnique
   */
  export type LineItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * Filter, which LineItem to fetch.
     */
    where: LineItemWhereUniqueInput
  }

  /**
   * LineItem findUniqueOrThrow
   */
  export type LineItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * Filter, which LineItem to fetch.
     */
    where: LineItemWhereUniqueInput
  }

  /**
   * LineItem findFirst
   */
  export type LineItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * Filter, which LineItem to fetch.
     */
    where?: LineItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineItems to fetch.
     */
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LineItems.
     */
    cursor?: LineItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LineItems.
     */
    distinct?: LineItemScalarFieldEnum | LineItemScalarFieldEnum[]
  }

  /**
   * LineItem findFirstOrThrow
   */
  export type LineItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * Filter, which LineItem to fetch.
     */
    where?: LineItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineItems to fetch.
     */
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LineItems.
     */
    cursor?: LineItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LineItems.
     */
    distinct?: LineItemScalarFieldEnum | LineItemScalarFieldEnum[]
  }

  /**
   * LineItem findMany
   */
  export type LineItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * Filter, which LineItems to fetch.
     */
    where?: LineItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LineItems to fetch.
     */
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LineItems.
     */
    cursor?: LineItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LineItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LineItems.
     */
    skip?: number
    distinct?: LineItemScalarFieldEnum | LineItemScalarFieldEnum[]
  }

  /**
   * LineItem create
   */
  export type LineItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * The data needed to create a LineItem.
     */
    data: XOR<LineItemCreateInput, LineItemUncheckedCreateInput>
  }

  /**
   * LineItem createMany
   */
  export type LineItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LineItems.
     */
    data: LineItemCreateManyInput | LineItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LineItem createManyAndReturn
   */
  export type LineItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * The data used to create many LineItems.
     */
    data: LineItemCreateManyInput | LineItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LineItem update
   */
  export type LineItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * The data needed to update a LineItem.
     */
    data: XOR<LineItemUpdateInput, LineItemUncheckedUpdateInput>
    /**
     * Choose, which LineItem to update.
     */
    where: LineItemWhereUniqueInput
  }

  /**
   * LineItem updateMany
   */
  export type LineItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LineItems.
     */
    data: XOR<LineItemUpdateManyMutationInput, LineItemUncheckedUpdateManyInput>
    /**
     * Filter which LineItems to update
     */
    where?: LineItemWhereInput
    /**
     * Limit how many LineItems to update.
     */
    limit?: number
  }

  /**
   * LineItem updateManyAndReturn
   */
  export type LineItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * The data used to update LineItems.
     */
    data: XOR<LineItemUpdateManyMutationInput, LineItemUncheckedUpdateManyInput>
    /**
     * Filter which LineItems to update
     */
    where?: LineItemWhereInput
    /**
     * Limit how many LineItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LineItem upsert
   */
  export type LineItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * The filter to search for the LineItem to update in case it exists.
     */
    where: LineItemWhereUniqueInput
    /**
     * In case the LineItem found by the `where` argument doesn't exist, create a new LineItem with this data.
     */
    create: XOR<LineItemCreateInput, LineItemUncheckedCreateInput>
    /**
     * In case the LineItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LineItemUpdateInput, LineItemUncheckedUpdateInput>
  }

  /**
   * LineItem delete
   */
  export type LineItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    /**
     * Filter which LineItem to delete.
     */
    where: LineItemWhereUniqueInput
  }

  /**
   * LineItem deleteMany
   */
  export type LineItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LineItems to delete
     */
    where?: LineItemWhereInput
    /**
     * Limit how many LineItems to delete.
     */
    limit?: number
  }

  /**
   * LineItem.operator
   */
  export type LineItem$operatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    where?: OperatorWhereInput
  }

  /**
   * LineItem without action
   */
  export type LineItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
  }


  /**
   * Model Operator
   */

  export type AggregateOperator = {
    _count: OperatorCountAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  export type OperatorMinAggregateOutputType = {
    operatorId: string | null
    name: string | null
  }

  export type OperatorMaxAggregateOutputType = {
    operatorId: string | null
    name: string | null
  }

  export type OperatorCountAggregateOutputType = {
    operatorId: number
    name: number
    _all: number
  }


  export type OperatorMinAggregateInputType = {
    operatorId?: true
    name?: true
  }

  export type OperatorMaxAggregateInputType = {
    operatorId?: true
    name?: true
  }

  export type OperatorCountAggregateInputType = {
    operatorId?: true
    name?: true
    _all?: true
  }

  export type OperatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operator to aggregate.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operators
    **/
    _count?: true | OperatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatorMaxAggregateInputType
  }

  export type GetOperatorAggregateType<T extends OperatorAggregateArgs> = {
        [P in keyof T & keyof AggregateOperator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperator[P]>
      : GetScalarType<T[P], AggregateOperator[P]>
  }




  export type OperatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorWhereInput
    orderBy?: OperatorOrderByWithAggregationInput | OperatorOrderByWithAggregationInput[]
    by: OperatorScalarFieldEnum[] | OperatorScalarFieldEnum
    having?: OperatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatorCountAggregateInputType | true
    _min?: OperatorMinAggregateInputType
    _max?: OperatorMaxAggregateInputType
  }

  export type OperatorGroupByOutputType = {
    operatorId: string
    name: string
    _count: OperatorCountAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  type GetOperatorGroupByPayload<T extends OperatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatorGroupByOutputType[P]>
            : GetScalarType<T[P], OperatorGroupByOutputType[P]>
        }
      >
    >


  export type OperatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    operatorId?: boolean
    name?: boolean
    lineItems?: boolean | Operator$lineItemsArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    operatorId?: boolean
    name?: boolean
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    operatorId?: boolean
    name?: boolean
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectScalar = {
    operatorId?: boolean
    name?: boolean
  }

  export type OperatorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"operatorId" | "name", ExtArgs["result"]["operator"]>
  export type OperatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lineItems?: boolean | Operator$lineItemsArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OperatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OperatorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OperatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operator"
    objects: {
      lineItems: Prisma.$LineItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      operatorId: string
      name: string
    }, ExtArgs["result"]["operator"]>
    composites: {}
  }

  type OperatorGetPayload<S extends boolean | null | undefined | OperatorDefaultArgs> = $Result.GetResult<Prisma.$OperatorPayload, S>

  type OperatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperatorCountAggregateInputType | true
    }

  export interface OperatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operator'], meta: { name: 'Operator' } }
    /**
     * Find zero or one Operator that matches the filter.
     * @param {OperatorFindUniqueArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatorFindUniqueArgs>(args: SelectSubset<T, OperatorFindUniqueArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Operator that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperatorFindUniqueOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatorFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatorFindFirstArgs>(args?: SelectSubset<T, OperatorFindFirstArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatorFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Operators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operators
     * const operators = await prisma.operator.findMany()
     * 
     * // Get first 10 Operators
     * const operators = await prisma.operator.findMany({ take: 10 })
     * 
     * // Only select the `operatorId`
     * const operatorWithOperatorIdOnly = await prisma.operator.findMany({ select: { operatorId: true } })
     * 
     */
    findMany<T extends OperatorFindManyArgs>(args?: SelectSubset<T, OperatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Operator.
     * @param {OperatorCreateArgs} args - Arguments to create a Operator.
     * @example
     * // Create one Operator
     * const Operator = await prisma.operator.create({
     *   data: {
     *     // ... data to create a Operator
     *   }
     * })
     * 
     */
    create<T extends OperatorCreateArgs>(args: SelectSubset<T, OperatorCreateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Operators.
     * @param {OperatorCreateManyArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatorCreateManyArgs>(args?: SelectSubset<T, OperatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operators and returns the data saved in the database.
     * @param {OperatorCreateManyAndReturnArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operators and only return the `operatorId`
     * const operatorWithOperatorIdOnly = await prisma.operator.createManyAndReturn({
     *   select: { operatorId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperatorCreateManyAndReturnArgs>(args?: SelectSubset<T, OperatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Operator.
     * @param {OperatorDeleteArgs} args - Arguments to delete one Operator.
     * @example
     * // Delete one Operator
     * const Operator = await prisma.operator.delete({
     *   where: {
     *     // ... filter to delete one Operator
     *   }
     * })
     * 
     */
    delete<T extends OperatorDeleteArgs>(args: SelectSubset<T, OperatorDeleteArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Operator.
     * @param {OperatorUpdateArgs} args - Arguments to update one Operator.
     * @example
     * // Update one Operator
     * const operator = await prisma.operator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatorUpdateArgs>(args: SelectSubset<T, OperatorUpdateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Operators.
     * @param {OperatorDeleteManyArgs} args - Arguments to filter Operators to delete.
     * @example
     * // Delete a few Operators
     * const { count } = await prisma.operator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatorDeleteManyArgs>(args?: SelectSubset<T, OperatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatorUpdateManyArgs>(args: SelectSubset<T, OperatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators and returns the data updated in the database.
     * @param {OperatorUpdateManyAndReturnArgs} args - Arguments to update many Operators.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Operators and only return the `operatorId`
     * const operatorWithOperatorIdOnly = await prisma.operator.updateManyAndReturn({
     *   select: { operatorId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperatorUpdateManyAndReturnArgs>(args: SelectSubset<T, OperatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Operator.
     * @param {OperatorUpsertArgs} args - Arguments to update or create a Operator.
     * @example
     * // Update or create a Operator
     * const operator = await prisma.operator.upsert({
     *   create: {
     *     // ... data to create a Operator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operator we want to update
     *   }
     * })
     */
    upsert<T extends OperatorUpsertArgs>(args: SelectSubset<T, OperatorUpsertArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorCountArgs} args - Arguments to filter Operators to count.
     * @example
     * // Count the number of Operators
     * const count = await prisma.operator.count({
     *   where: {
     *     // ... the filter for the Operators we want to count
     *   }
     * })
    **/
    count<T extends OperatorCountArgs>(
      args?: Subset<T, OperatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatorAggregateArgs>(args: Subset<T, OperatorAggregateArgs>): Prisma.PrismaPromise<GetOperatorAggregateType<T>>

    /**
     * Group by Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatorGroupByArgs['orderBy'] }
        : { orderBy?: OperatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operator model
   */
  readonly fields: OperatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lineItems<T extends Operator$lineItemsArgs<ExtArgs> = {}>(args?: Subset<T, Operator$lineItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LineItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operator model
   */
  interface OperatorFieldRefs {
    readonly operatorId: FieldRef<"Operator", 'String'>
    readonly name: FieldRef<"Operator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Operator findUnique
   */
  export type OperatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findUniqueOrThrow
   */
  export type OperatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findFirst
   */
  export type OperatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findFirstOrThrow
   */
  export type OperatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findMany
   */
  export type OperatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operators to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator create
   */
  export type OperatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Operator.
     */
    data: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
  }

  /**
   * Operator createMany
   */
  export type OperatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator createManyAndReturn
   */
  export type OperatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator update
   */
  export type OperatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Operator.
     */
    data: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
    /**
     * Choose, which Operator to update.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator updateMany
   */
  export type OperatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to update.
     */
    limit?: number
  }

  /**
   * Operator updateManyAndReturn
   */
  export type OperatorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to update.
     */
    limit?: number
  }

  /**
   * Operator upsert
   */
  export type OperatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Operator to update in case it exists.
     */
    where: OperatorWhereUniqueInput
    /**
     * In case the Operator found by the `where` argument doesn't exist, create a new Operator with this data.
     */
    create: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
    /**
     * In case the Operator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
  }

  /**
   * Operator delete
   */
  export type OperatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter which Operator to delete.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator deleteMany
   */
  export type OperatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operators to delete
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to delete.
     */
    limit?: number
  }

  /**
   * Operator.lineItems
   */
  export type Operator$lineItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineItem
     */
    select?: LineItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LineItem
     */
    omit?: LineItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LineItemInclude<ExtArgs> | null
    where?: LineItemWhereInput
    orderBy?: LineItemOrderByWithRelationInput | LineItemOrderByWithRelationInput[]
    cursor?: LineItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LineItemScalarFieldEnum | LineItemScalarFieldEnum[]
  }

  /**
   * Operator without action
   */
  export type OperatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
  }


  /**
   * Model WaitingList
   */

  export type AggregateWaitingList = {
    _count: WaitingListCountAggregateOutputType | null
    _avg: WaitingListAvgAggregateOutputType | null
    _sum: WaitingListSumAggregateOutputType | null
    _min: WaitingListMinAggregateOutputType | null
    _max: WaitingListMaxAggregateOutputType | null
  }

  export type WaitingListAvgAggregateOutputType = {
    quantity: number | null
  }

  export type WaitingListSumAggregateOutputType = {
    quantity: number | null
  }

  export type WaitingListMinAggregateOutputType = {
    requestId: string | null
    clientId: string | null
    equipmentTypeId: string | null
    quantity: number | null
    requestedStartDate: Date | null
    status: string | null
    createdAt: Date | null
  }

  export type WaitingListMaxAggregateOutputType = {
    requestId: string | null
    clientId: string | null
    equipmentTypeId: string | null
    quantity: number | null
    requestedStartDate: Date | null
    status: string | null
    createdAt: Date | null
  }

  export type WaitingListCountAggregateOutputType = {
    requestId: number
    clientId: number
    equipmentTypeId: number
    quantity: number
    requestedStartDate: number
    status: number
    createdAt: number
    _all: number
  }


  export type WaitingListAvgAggregateInputType = {
    quantity?: true
  }

  export type WaitingListSumAggregateInputType = {
    quantity?: true
  }

  export type WaitingListMinAggregateInputType = {
    requestId?: true
    clientId?: true
    equipmentTypeId?: true
    quantity?: true
    requestedStartDate?: true
    status?: true
    createdAt?: true
  }

  export type WaitingListMaxAggregateInputType = {
    requestId?: true
    clientId?: true
    equipmentTypeId?: true
    quantity?: true
    requestedStartDate?: true
    status?: true
    createdAt?: true
  }

  export type WaitingListCountAggregateInputType = {
    requestId?: true
    clientId?: true
    equipmentTypeId?: true
    quantity?: true
    requestedStartDate?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type WaitingListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WaitingList to aggregate.
     */
    where?: WaitingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaitingLists to fetch.
     */
    orderBy?: WaitingListOrderByWithRelationInput | WaitingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WaitingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaitingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaitingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WaitingLists
    **/
    _count?: true | WaitingListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WaitingListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WaitingListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WaitingListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WaitingListMaxAggregateInputType
  }

  export type GetWaitingListAggregateType<T extends WaitingListAggregateArgs> = {
        [P in keyof T & keyof AggregateWaitingList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWaitingList[P]>
      : GetScalarType<T[P], AggregateWaitingList[P]>
  }




  export type WaitingListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WaitingListWhereInput
    orderBy?: WaitingListOrderByWithAggregationInput | WaitingListOrderByWithAggregationInput[]
    by: WaitingListScalarFieldEnum[] | WaitingListScalarFieldEnum
    having?: WaitingListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WaitingListCountAggregateInputType | true
    _avg?: WaitingListAvgAggregateInputType
    _sum?: WaitingListSumAggregateInputType
    _min?: WaitingListMinAggregateInputType
    _max?: WaitingListMaxAggregateInputType
  }

  export type WaitingListGroupByOutputType = {
    requestId: string
    clientId: string
    equipmentTypeId: string
    quantity: number
    requestedStartDate: Date
    status: string
    createdAt: Date
    _count: WaitingListCountAggregateOutputType | null
    _avg: WaitingListAvgAggregateOutputType | null
    _sum: WaitingListSumAggregateOutputType | null
    _min: WaitingListMinAggregateOutputType | null
    _max: WaitingListMaxAggregateOutputType | null
  }

  type GetWaitingListGroupByPayload<T extends WaitingListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WaitingListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WaitingListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WaitingListGroupByOutputType[P]>
            : GetScalarType<T[P], WaitingListGroupByOutputType[P]>
        }
      >
    >


  export type WaitingListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    requestId?: boolean
    clientId?: boolean
    equipmentTypeId?: boolean
    quantity?: boolean
    requestedStartDate?: boolean
    status?: boolean
    createdAt?: boolean
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waitingList"]>

  export type WaitingListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    requestId?: boolean
    clientId?: boolean
    equipmentTypeId?: boolean
    quantity?: boolean
    requestedStartDate?: boolean
    status?: boolean
    createdAt?: boolean
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waitingList"]>

  export type WaitingListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    requestId?: boolean
    clientId?: boolean
    equipmentTypeId?: boolean
    quantity?: boolean
    requestedStartDate?: boolean
    status?: boolean
    createdAt?: boolean
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["waitingList"]>

  export type WaitingListSelectScalar = {
    requestId?: boolean
    clientId?: boolean
    equipmentTypeId?: boolean
    quantity?: boolean
    requestedStartDate?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type WaitingListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"requestId" | "clientId" | "equipmentTypeId" | "quantity" | "requestedStartDate" | "status" | "createdAt", ExtArgs["result"]["waitingList"]>
  export type WaitingListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }
  export type WaitingListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }
  export type WaitingListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipmentType?: boolean | EquipmentTypeDefaultArgs<ExtArgs>
  }

  export type $WaitingListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WaitingList"
    objects: {
      equipmentType: Prisma.$EquipmentTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      requestId: string
      clientId: string
      equipmentTypeId: string
      quantity: number
      requestedStartDate: Date
      status: string
      createdAt: Date
    }, ExtArgs["result"]["waitingList"]>
    composites: {}
  }

  type WaitingListGetPayload<S extends boolean | null | undefined | WaitingListDefaultArgs> = $Result.GetResult<Prisma.$WaitingListPayload, S>

  type WaitingListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WaitingListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WaitingListCountAggregateInputType | true
    }

  export interface WaitingListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WaitingList'], meta: { name: 'WaitingList' } }
    /**
     * Find zero or one WaitingList that matches the filter.
     * @param {WaitingListFindUniqueArgs} args - Arguments to find a WaitingList
     * @example
     * // Get one WaitingList
     * const waitingList = await prisma.waitingList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WaitingListFindUniqueArgs>(args: SelectSubset<T, WaitingListFindUniqueArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WaitingList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WaitingListFindUniqueOrThrowArgs} args - Arguments to find a WaitingList
     * @example
     * // Get one WaitingList
     * const waitingList = await prisma.waitingList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WaitingListFindUniqueOrThrowArgs>(args: SelectSubset<T, WaitingListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WaitingList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListFindFirstArgs} args - Arguments to find a WaitingList
     * @example
     * // Get one WaitingList
     * const waitingList = await prisma.waitingList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WaitingListFindFirstArgs>(args?: SelectSubset<T, WaitingListFindFirstArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WaitingList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListFindFirstOrThrowArgs} args - Arguments to find a WaitingList
     * @example
     * // Get one WaitingList
     * const waitingList = await prisma.waitingList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WaitingListFindFirstOrThrowArgs>(args?: SelectSubset<T, WaitingListFindFirstOrThrowArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WaitingLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WaitingLists
     * const waitingLists = await prisma.waitingList.findMany()
     * 
     * // Get first 10 WaitingLists
     * const waitingLists = await prisma.waitingList.findMany({ take: 10 })
     * 
     * // Only select the `requestId`
     * const waitingListWithRequestIdOnly = await prisma.waitingList.findMany({ select: { requestId: true } })
     * 
     */
    findMany<T extends WaitingListFindManyArgs>(args?: SelectSubset<T, WaitingListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WaitingList.
     * @param {WaitingListCreateArgs} args - Arguments to create a WaitingList.
     * @example
     * // Create one WaitingList
     * const WaitingList = await prisma.waitingList.create({
     *   data: {
     *     // ... data to create a WaitingList
     *   }
     * })
     * 
     */
    create<T extends WaitingListCreateArgs>(args: SelectSubset<T, WaitingListCreateArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WaitingLists.
     * @param {WaitingListCreateManyArgs} args - Arguments to create many WaitingLists.
     * @example
     * // Create many WaitingLists
     * const waitingList = await prisma.waitingList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WaitingListCreateManyArgs>(args?: SelectSubset<T, WaitingListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WaitingLists and returns the data saved in the database.
     * @param {WaitingListCreateManyAndReturnArgs} args - Arguments to create many WaitingLists.
     * @example
     * // Create many WaitingLists
     * const waitingList = await prisma.waitingList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WaitingLists and only return the `requestId`
     * const waitingListWithRequestIdOnly = await prisma.waitingList.createManyAndReturn({
     *   select: { requestId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WaitingListCreateManyAndReturnArgs>(args?: SelectSubset<T, WaitingListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WaitingList.
     * @param {WaitingListDeleteArgs} args - Arguments to delete one WaitingList.
     * @example
     * // Delete one WaitingList
     * const WaitingList = await prisma.waitingList.delete({
     *   where: {
     *     // ... filter to delete one WaitingList
     *   }
     * })
     * 
     */
    delete<T extends WaitingListDeleteArgs>(args: SelectSubset<T, WaitingListDeleteArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WaitingList.
     * @param {WaitingListUpdateArgs} args - Arguments to update one WaitingList.
     * @example
     * // Update one WaitingList
     * const waitingList = await prisma.waitingList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WaitingListUpdateArgs>(args: SelectSubset<T, WaitingListUpdateArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WaitingLists.
     * @param {WaitingListDeleteManyArgs} args - Arguments to filter WaitingLists to delete.
     * @example
     * // Delete a few WaitingLists
     * const { count } = await prisma.waitingList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WaitingListDeleteManyArgs>(args?: SelectSubset<T, WaitingListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WaitingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WaitingLists
     * const waitingList = await prisma.waitingList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WaitingListUpdateManyArgs>(args: SelectSubset<T, WaitingListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WaitingLists and returns the data updated in the database.
     * @param {WaitingListUpdateManyAndReturnArgs} args - Arguments to update many WaitingLists.
     * @example
     * // Update many WaitingLists
     * const waitingList = await prisma.waitingList.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WaitingLists and only return the `requestId`
     * const waitingListWithRequestIdOnly = await prisma.waitingList.updateManyAndReturn({
     *   select: { requestId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WaitingListUpdateManyAndReturnArgs>(args: SelectSubset<T, WaitingListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WaitingList.
     * @param {WaitingListUpsertArgs} args - Arguments to update or create a WaitingList.
     * @example
     * // Update or create a WaitingList
     * const waitingList = await prisma.waitingList.upsert({
     *   create: {
     *     // ... data to create a WaitingList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WaitingList we want to update
     *   }
     * })
     */
    upsert<T extends WaitingListUpsertArgs>(args: SelectSubset<T, WaitingListUpsertArgs<ExtArgs>>): Prisma__WaitingListClient<$Result.GetResult<Prisma.$WaitingListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WaitingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListCountArgs} args - Arguments to filter WaitingLists to count.
     * @example
     * // Count the number of WaitingLists
     * const count = await prisma.waitingList.count({
     *   where: {
     *     // ... the filter for the WaitingLists we want to count
     *   }
     * })
    **/
    count<T extends WaitingListCountArgs>(
      args?: Subset<T, WaitingListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WaitingListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WaitingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WaitingListAggregateArgs>(args: Subset<T, WaitingListAggregateArgs>): Prisma.PrismaPromise<GetWaitingListAggregateType<T>>

    /**
     * Group by WaitingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WaitingListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WaitingListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WaitingListGroupByArgs['orderBy'] }
        : { orderBy?: WaitingListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WaitingListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWaitingListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WaitingList model
   */
  readonly fields: WaitingListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WaitingList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WaitingListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipmentType<T extends EquipmentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentTypeDefaultArgs<ExtArgs>>): Prisma__EquipmentTypeClient<$Result.GetResult<Prisma.$EquipmentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WaitingList model
   */
  interface WaitingListFieldRefs {
    readonly requestId: FieldRef<"WaitingList", 'String'>
    readonly clientId: FieldRef<"WaitingList", 'String'>
    readonly equipmentTypeId: FieldRef<"WaitingList", 'String'>
    readonly quantity: FieldRef<"WaitingList", 'Int'>
    readonly requestedStartDate: FieldRef<"WaitingList", 'DateTime'>
    readonly status: FieldRef<"WaitingList", 'String'>
    readonly createdAt: FieldRef<"WaitingList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WaitingList findUnique
   */
  export type WaitingListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * Filter, which WaitingList to fetch.
     */
    where: WaitingListWhereUniqueInput
  }

  /**
   * WaitingList findUniqueOrThrow
   */
  export type WaitingListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * Filter, which WaitingList to fetch.
     */
    where: WaitingListWhereUniqueInput
  }

  /**
   * WaitingList findFirst
   */
  export type WaitingListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * Filter, which WaitingList to fetch.
     */
    where?: WaitingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaitingLists to fetch.
     */
    orderBy?: WaitingListOrderByWithRelationInput | WaitingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WaitingLists.
     */
    cursor?: WaitingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaitingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaitingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WaitingLists.
     */
    distinct?: WaitingListScalarFieldEnum | WaitingListScalarFieldEnum[]
  }

  /**
   * WaitingList findFirstOrThrow
   */
  export type WaitingListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * Filter, which WaitingList to fetch.
     */
    where?: WaitingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaitingLists to fetch.
     */
    orderBy?: WaitingListOrderByWithRelationInput | WaitingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WaitingLists.
     */
    cursor?: WaitingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaitingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaitingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WaitingLists.
     */
    distinct?: WaitingListScalarFieldEnum | WaitingListScalarFieldEnum[]
  }

  /**
   * WaitingList findMany
   */
  export type WaitingListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * Filter, which WaitingLists to fetch.
     */
    where?: WaitingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WaitingLists to fetch.
     */
    orderBy?: WaitingListOrderByWithRelationInput | WaitingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WaitingLists.
     */
    cursor?: WaitingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WaitingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WaitingLists.
     */
    skip?: number
    distinct?: WaitingListScalarFieldEnum | WaitingListScalarFieldEnum[]
  }

  /**
   * WaitingList create
   */
  export type WaitingListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * The data needed to create a WaitingList.
     */
    data: XOR<WaitingListCreateInput, WaitingListUncheckedCreateInput>
  }

  /**
   * WaitingList createMany
   */
  export type WaitingListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WaitingLists.
     */
    data: WaitingListCreateManyInput | WaitingListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WaitingList createManyAndReturn
   */
  export type WaitingListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * The data used to create many WaitingLists.
     */
    data: WaitingListCreateManyInput | WaitingListCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WaitingList update
   */
  export type WaitingListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * The data needed to update a WaitingList.
     */
    data: XOR<WaitingListUpdateInput, WaitingListUncheckedUpdateInput>
    /**
     * Choose, which WaitingList to update.
     */
    where: WaitingListWhereUniqueInput
  }

  /**
   * WaitingList updateMany
   */
  export type WaitingListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WaitingLists.
     */
    data: XOR<WaitingListUpdateManyMutationInput, WaitingListUncheckedUpdateManyInput>
    /**
     * Filter which WaitingLists to update
     */
    where?: WaitingListWhereInput
    /**
     * Limit how many WaitingLists to update.
     */
    limit?: number
  }

  /**
   * WaitingList updateManyAndReturn
   */
  export type WaitingListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * The data used to update WaitingLists.
     */
    data: XOR<WaitingListUpdateManyMutationInput, WaitingListUncheckedUpdateManyInput>
    /**
     * Filter which WaitingLists to update
     */
    where?: WaitingListWhereInput
    /**
     * Limit how many WaitingLists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WaitingList upsert
   */
  export type WaitingListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * The filter to search for the WaitingList to update in case it exists.
     */
    where: WaitingListWhereUniqueInput
    /**
     * In case the WaitingList found by the `where` argument doesn't exist, create a new WaitingList with this data.
     */
    create: XOR<WaitingListCreateInput, WaitingListUncheckedCreateInput>
    /**
     * In case the WaitingList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WaitingListUpdateInput, WaitingListUncheckedUpdateInput>
  }

  /**
   * WaitingList delete
   */
  export type WaitingListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
    /**
     * Filter which WaitingList to delete.
     */
    where: WaitingListWhereUniqueInput
  }

  /**
   * WaitingList deleteMany
   */
  export type WaitingListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WaitingLists to delete
     */
    where?: WaitingListWhereInput
    /**
     * Limit how many WaitingLists to delete.
     */
    limit?: number
  }

  /**
   * WaitingList without action
   */
  export type WaitingListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WaitingList
     */
    select?: WaitingListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WaitingList
     */
    omit?: WaitingListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WaitingListInclude<ExtArgs> | null
  }


  /**
   * Model RawEventLog
   */

  export type AggregateRawEventLog = {
    _count: RawEventLogCountAggregateOutputType | null
    _min: RawEventLogMinAggregateOutputType | null
    _max: RawEventLogMaxAggregateOutputType | null
  }

  export type RawEventLogMinAggregateOutputType = {
    id: string | null
    timestamp: Date | null
    equipmentId: string | null
    eventType: $Enums.EventType | null
    isProcessed: boolean | null
  }

  export type RawEventLogMaxAggregateOutputType = {
    id: string | null
    timestamp: Date | null
    equipmentId: string | null
    eventType: $Enums.EventType | null
    isProcessed: boolean | null
  }

  export type RawEventLogCountAggregateOutputType = {
    id: number
    timestamp: number
    equipmentId: number
    eventType: number
    value: number
    isProcessed: number
    _all: number
  }


  export type RawEventLogMinAggregateInputType = {
    id?: true
    timestamp?: true
    equipmentId?: true
    eventType?: true
    isProcessed?: true
  }

  export type RawEventLogMaxAggregateInputType = {
    id?: true
    timestamp?: true
    equipmentId?: true
    eventType?: true
    isProcessed?: true
  }

  export type RawEventLogCountAggregateInputType = {
    id?: true
    timestamp?: true
    equipmentId?: true
    eventType?: true
    value?: true
    isProcessed?: true
    _all?: true
  }

  export type RawEventLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RawEventLog to aggregate.
     */
    where?: RawEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEventLogs to fetch.
     */
    orderBy?: RawEventLogOrderByWithRelationInput | RawEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RawEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RawEventLogs
    **/
    _count?: true | RawEventLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RawEventLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RawEventLogMaxAggregateInputType
  }

  export type GetRawEventLogAggregateType<T extends RawEventLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRawEventLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRawEventLog[P]>
      : GetScalarType<T[P], AggregateRawEventLog[P]>
  }




  export type RawEventLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RawEventLogWhereInput
    orderBy?: RawEventLogOrderByWithAggregationInput | RawEventLogOrderByWithAggregationInput[]
    by: RawEventLogScalarFieldEnum[] | RawEventLogScalarFieldEnum
    having?: RawEventLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RawEventLogCountAggregateInputType | true
    _min?: RawEventLogMinAggregateInputType
    _max?: RawEventLogMaxAggregateInputType
  }

  export type RawEventLogGroupByOutputType = {
    id: string
    timestamp: Date
    equipmentId: string
    eventType: $Enums.EventType
    value: JsonValue
    isProcessed: boolean
    _count: RawEventLogCountAggregateOutputType | null
    _min: RawEventLogMinAggregateOutputType | null
    _max: RawEventLogMaxAggregateOutputType | null
  }

  type GetRawEventLogGroupByPayload<T extends RawEventLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RawEventLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RawEventLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RawEventLogGroupByOutputType[P]>
            : GetScalarType<T[P], RawEventLogGroupByOutputType[P]>
        }
      >
    >


  export type RawEventLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    equipmentId?: boolean
    eventType?: boolean
    value?: boolean
    isProcessed?: boolean
  }, ExtArgs["result"]["rawEventLog"]>

  export type RawEventLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    equipmentId?: boolean
    eventType?: boolean
    value?: boolean
    isProcessed?: boolean
  }, ExtArgs["result"]["rawEventLog"]>

  export type RawEventLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    equipmentId?: boolean
    eventType?: boolean
    value?: boolean
    isProcessed?: boolean
  }, ExtArgs["result"]["rawEventLog"]>

  export type RawEventLogSelectScalar = {
    id?: boolean
    timestamp?: boolean
    equipmentId?: boolean
    eventType?: boolean
    value?: boolean
    isProcessed?: boolean
  }

  export type RawEventLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timestamp" | "equipmentId" | "eventType" | "value" | "isProcessed", ExtArgs["result"]["rawEventLog"]>

  export type $RawEventLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RawEventLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      timestamp: Date
      equipmentId: string
      eventType: $Enums.EventType
      value: Prisma.JsonValue
      isProcessed: boolean
    }, ExtArgs["result"]["rawEventLog"]>
    composites: {}
  }

  type RawEventLogGetPayload<S extends boolean | null | undefined | RawEventLogDefaultArgs> = $Result.GetResult<Prisma.$RawEventLogPayload, S>

  type RawEventLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RawEventLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RawEventLogCountAggregateInputType | true
    }

  export interface RawEventLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RawEventLog'], meta: { name: 'RawEventLog' } }
    /**
     * Find zero or one RawEventLog that matches the filter.
     * @param {RawEventLogFindUniqueArgs} args - Arguments to find a RawEventLog
     * @example
     * // Get one RawEventLog
     * const rawEventLog = await prisma.rawEventLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RawEventLogFindUniqueArgs>(args: SelectSubset<T, RawEventLogFindUniqueArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RawEventLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RawEventLogFindUniqueOrThrowArgs} args - Arguments to find a RawEventLog
     * @example
     * // Get one RawEventLog
     * const rawEventLog = await prisma.rawEventLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RawEventLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RawEventLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RawEventLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogFindFirstArgs} args - Arguments to find a RawEventLog
     * @example
     * // Get one RawEventLog
     * const rawEventLog = await prisma.rawEventLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RawEventLogFindFirstArgs>(args?: SelectSubset<T, RawEventLogFindFirstArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RawEventLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogFindFirstOrThrowArgs} args - Arguments to find a RawEventLog
     * @example
     * // Get one RawEventLog
     * const rawEventLog = await prisma.rawEventLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RawEventLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RawEventLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RawEventLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RawEventLogs
     * const rawEventLogs = await prisma.rawEventLog.findMany()
     * 
     * // Get first 10 RawEventLogs
     * const rawEventLogs = await prisma.rawEventLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rawEventLogWithIdOnly = await prisma.rawEventLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RawEventLogFindManyArgs>(args?: SelectSubset<T, RawEventLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RawEventLog.
     * @param {RawEventLogCreateArgs} args - Arguments to create a RawEventLog.
     * @example
     * // Create one RawEventLog
     * const RawEventLog = await prisma.rawEventLog.create({
     *   data: {
     *     // ... data to create a RawEventLog
     *   }
     * })
     * 
     */
    create<T extends RawEventLogCreateArgs>(args: SelectSubset<T, RawEventLogCreateArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RawEventLogs.
     * @param {RawEventLogCreateManyArgs} args - Arguments to create many RawEventLogs.
     * @example
     * // Create many RawEventLogs
     * const rawEventLog = await prisma.rawEventLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RawEventLogCreateManyArgs>(args?: SelectSubset<T, RawEventLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RawEventLogs and returns the data saved in the database.
     * @param {RawEventLogCreateManyAndReturnArgs} args - Arguments to create many RawEventLogs.
     * @example
     * // Create many RawEventLogs
     * const rawEventLog = await prisma.rawEventLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RawEventLogs and only return the `id`
     * const rawEventLogWithIdOnly = await prisma.rawEventLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RawEventLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RawEventLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RawEventLog.
     * @param {RawEventLogDeleteArgs} args - Arguments to delete one RawEventLog.
     * @example
     * // Delete one RawEventLog
     * const RawEventLog = await prisma.rawEventLog.delete({
     *   where: {
     *     // ... filter to delete one RawEventLog
     *   }
     * })
     * 
     */
    delete<T extends RawEventLogDeleteArgs>(args: SelectSubset<T, RawEventLogDeleteArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RawEventLog.
     * @param {RawEventLogUpdateArgs} args - Arguments to update one RawEventLog.
     * @example
     * // Update one RawEventLog
     * const rawEventLog = await prisma.rawEventLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RawEventLogUpdateArgs>(args: SelectSubset<T, RawEventLogUpdateArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RawEventLogs.
     * @param {RawEventLogDeleteManyArgs} args - Arguments to filter RawEventLogs to delete.
     * @example
     * // Delete a few RawEventLogs
     * const { count } = await prisma.rawEventLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RawEventLogDeleteManyArgs>(args?: SelectSubset<T, RawEventLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RawEventLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RawEventLogs
     * const rawEventLog = await prisma.rawEventLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RawEventLogUpdateManyArgs>(args: SelectSubset<T, RawEventLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RawEventLogs and returns the data updated in the database.
     * @param {RawEventLogUpdateManyAndReturnArgs} args - Arguments to update many RawEventLogs.
     * @example
     * // Update many RawEventLogs
     * const rawEventLog = await prisma.rawEventLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RawEventLogs and only return the `id`
     * const rawEventLogWithIdOnly = await prisma.rawEventLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RawEventLogUpdateManyAndReturnArgs>(args: SelectSubset<T, RawEventLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RawEventLog.
     * @param {RawEventLogUpsertArgs} args - Arguments to update or create a RawEventLog.
     * @example
     * // Update or create a RawEventLog
     * const rawEventLog = await prisma.rawEventLog.upsert({
     *   create: {
     *     // ... data to create a RawEventLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RawEventLog we want to update
     *   }
     * })
     */
    upsert<T extends RawEventLogUpsertArgs>(args: SelectSubset<T, RawEventLogUpsertArgs<ExtArgs>>): Prisma__RawEventLogClient<$Result.GetResult<Prisma.$RawEventLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RawEventLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogCountArgs} args - Arguments to filter RawEventLogs to count.
     * @example
     * // Count the number of RawEventLogs
     * const count = await prisma.rawEventLog.count({
     *   where: {
     *     // ... the filter for the RawEventLogs we want to count
     *   }
     * })
    **/
    count<T extends RawEventLogCountArgs>(
      args?: Subset<T, RawEventLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RawEventLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RawEventLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RawEventLogAggregateArgs>(args: Subset<T, RawEventLogAggregateArgs>): Prisma.PrismaPromise<GetRawEventLogAggregateType<T>>

    /**
     * Group by RawEventLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawEventLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RawEventLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RawEventLogGroupByArgs['orderBy'] }
        : { orderBy?: RawEventLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RawEventLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRawEventLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RawEventLog model
   */
  readonly fields: RawEventLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RawEventLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RawEventLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RawEventLog model
   */
  interface RawEventLogFieldRefs {
    readonly id: FieldRef<"RawEventLog", 'String'>
    readonly timestamp: FieldRef<"RawEventLog", 'DateTime'>
    readonly equipmentId: FieldRef<"RawEventLog", 'String'>
    readonly eventType: FieldRef<"RawEventLog", 'EventType'>
    readonly value: FieldRef<"RawEventLog", 'Json'>
    readonly isProcessed: FieldRef<"RawEventLog", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RawEventLog findUnique
   */
  export type RawEventLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * Filter, which RawEventLog to fetch.
     */
    where: RawEventLogWhereUniqueInput
  }

  /**
   * RawEventLog findUniqueOrThrow
   */
  export type RawEventLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * Filter, which RawEventLog to fetch.
     */
    where: RawEventLogWhereUniqueInput
  }

  /**
   * RawEventLog findFirst
   */
  export type RawEventLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * Filter, which RawEventLog to fetch.
     */
    where?: RawEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEventLogs to fetch.
     */
    orderBy?: RawEventLogOrderByWithRelationInput | RawEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RawEventLogs.
     */
    cursor?: RawEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RawEventLogs.
     */
    distinct?: RawEventLogScalarFieldEnum | RawEventLogScalarFieldEnum[]
  }

  /**
   * RawEventLog findFirstOrThrow
   */
  export type RawEventLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * Filter, which RawEventLog to fetch.
     */
    where?: RawEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEventLogs to fetch.
     */
    orderBy?: RawEventLogOrderByWithRelationInput | RawEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RawEventLogs.
     */
    cursor?: RawEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RawEventLogs.
     */
    distinct?: RawEventLogScalarFieldEnum | RawEventLogScalarFieldEnum[]
  }

  /**
   * RawEventLog findMany
   */
  export type RawEventLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * Filter, which RawEventLogs to fetch.
     */
    where?: RawEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawEventLogs to fetch.
     */
    orderBy?: RawEventLogOrderByWithRelationInput | RawEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RawEventLogs.
     */
    cursor?: RawEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawEventLogs.
     */
    skip?: number
    distinct?: RawEventLogScalarFieldEnum | RawEventLogScalarFieldEnum[]
  }

  /**
   * RawEventLog create
   */
  export type RawEventLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * The data needed to create a RawEventLog.
     */
    data: XOR<RawEventLogCreateInput, RawEventLogUncheckedCreateInput>
  }

  /**
   * RawEventLog createMany
   */
  export type RawEventLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RawEventLogs.
     */
    data: RawEventLogCreateManyInput | RawEventLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RawEventLog createManyAndReturn
   */
  export type RawEventLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * The data used to create many RawEventLogs.
     */
    data: RawEventLogCreateManyInput | RawEventLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RawEventLog update
   */
  export type RawEventLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * The data needed to update a RawEventLog.
     */
    data: XOR<RawEventLogUpdateInput, RawEventLogUncheckedUpdateInput>
    /**
     * Choose, which RawEventLog to update.
     */
    where: RawEventLogWhereUniqueInput
  }

  /**
   * RawEventLog updateMany
   */
  export type RawEventLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RawEventLogs.
     */
    data: XOR<RawEventLogUpdateManyMutationInput, RawEventLogUncheckedUpdateManyInput>
    /**
     * Filter which RawEventLogs to update
     */
    where?: RawEventLogWhereInput
    /**
     * Limit how many RawEventLogs to update.
     */
    limit?: number
  }

  /**
   * RawEventLog updateManyAndReturn
   */
  export type RawEventLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * The data used to update RawEventLogs.
     */
    data: XOR<RawEventLogUpdateManyMutationInput, RawEventLogUncheckedUpdateManyInput>
    /**
     * Filter which RawEventLogs to update
     */
    where?: RawEventLogWhereInput
    /**
     * Limit how many RawEventLogs to update.
     */
    limit?: number
  }

  /**
   * RawEventLog upsert
   */
  export type RawEventLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * The filter to search for the RawEventLog to update in case it exists.
     */
    where: RawEventLogWhereUniqueInput
    /**
     * In case the RawEventLog found by the `where` argument doesn't exist, create a new RawEventLog with this data.
     */
    create: XOR<RawEventLogCreateInput, RawEventLogUncheckedCreateInput>
    /**
     * In case the RawEventLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RawEventLogUpdateInput, RawEventLogUncheckedUpdateInput>
  }

  /**
   * RawEventLog delete
   */
  export type RawEventLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
    /**
     * Filter which RawEventLog to delete.
     */
    where: RawEventLogWhereUniqueInput
  }

  /**
   * RawEventLog deleteMany
   */
  export type RawEventLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RawEventLogs to delete
     */
    where?: RawEventLogWhereInput
    /**
     * Limit how many RawEventLogs to delete.
     */
    limit?: number
  }

  /**
   * RawEventLog without action
   */
  export type RawEventLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawEventLog
     */
    select?: RawEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RawEventLog
     */
    omit?: RawEventLogOmit<ExtArgs> | null
  }


  /**
   * Model DailyUsageSummary
   */

  export type AggregateDailyUsageSummary = {
    _count: DailyUsageSummaryCountAggregateOutputType | null
    _avg: DailyUsageSummaryAvgAggregateOutputType | null
    _sum: DailyUsageSummarySumAggregateOutputType | null
    _min: DailyUsageSummaryMinAggregateOutputType | null
    _max: DailyUsageSummaryMaxAggregateOutputType | null
  }

  export type DailyUsageSummaryAvgAggregateOutputType = {
    totalEngineHours: number | null
    totalIdleHours: number | null
    workingHours: number | null
    fuelConsumed: number | null
    distanceTraveled: number | null
    highEngineTempAlerts: number | null
    suddenFuelDrops: number | null
    diagnosticErrors: number | null
  }

  export type DailyUsageSummarySumAggregateOutputType = {
    totalEngineHours: number | null
    totalIdleHours: number | null
    workingHours: number | null
    fuelConsumed: number | null
    distanceTraveled: number | null
    highEngineTempAlerts: number | null
    suddenFuelDrops: number | null
    diagnosticErrors: number | null
  }

  export type DailyUsageSummaryMinAggregateOutputType = {
    id: string | null
    date: Date | null
    equipmentId: string | null
    totalEngineHours: number | null
    totalIdleHours: number | null
    workingHours: number | null
    fuelConsumed: number | null
    distanceTraveled: number | null
    highEngineTempAlerts: number | null
    suddenFuelDrops: number | null
    diagnosticErrors: number | null
    clientClientId: string | null
  }

  export type DailyUsageSummaryMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    equipmentId: string | null
    totalEngineHours: number | null
    totalIdleHours: number | null
    workingHours: number | null
    fuelConsumed: number | null
    distanceTraveled: number | null
    highEngineTempAlerts: number | null
    suddenFuelDrops: number | null
    diagnosticErrors: number | null
    clientClientId: string | null
  }

  export type DailyUsageSummaryCountAggregateOutputType = {
    id: number
    date: number
    equipmentId: number
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled: number
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    clientClientId: number
    _all: number
  }


  export type DailyUsageSummaryAvgAggregateInputType = {
    totalEngineHours?: true
    totalIdleHours?: true
    workingHours?: true
    fuelConsumed?: true
    distanceTraveled?: true
    highEngineTempAlerts?: true
    suddenFuelDrops?: true
    diagnosticErrors?: true
  }

  export type DailyUsageSummarySumAggregateInputType = {
    totalEngineHours?: true
    totalIdleHours?: true
    workingHours?: true
    fuelConsumed?: true
    distanceTraveled?: true
    highEngineTempAlerts?: true
    suddenFuelDrops?: true
    diagnosticErrors?: true
  }

  export type DailyUsageSummaryMinAggregateInputType = {
    id?: true
    date?: true
    equipmentId?: true
    totalEngineHours?: true
    totalIdleHours?: true
    workingHours?: true
    fuelConsumed?: true
    distanceTraveled?: true
    highEngineTempAlerts?: true
    suddenFuelDrops?: true
    diagnosticErrors?: true
    clientClientId?: true
  }

  export type DailyUsageSummaryMaxAggregateInputType = {
    id?: true
    date?: true
    equipmentId?: true
    totalEngineHours?: true
    totalIdleHours?: true
    workingHours?: true
    fuelConsumed?: true
    distanceTraveled?: true
    highEngineTempAlerts?: true
    suddenFuelDrops?: true
    diagnosticErrors?: true
    clientClientId?: true
  }

  export type DailyUsageSummaryCountAggregateInputType = {
    id?: true
    date?: true
    equipmentId?: true
    totalEngineHours?: true
    totalIdleHours?: true
    workingHours?: true
    fuelConsumed?: true
    distanceTraveled?: true
    highEngineTempAlerts?: true
    suddenFuelDrops?: true
    diagnosticErrors?: true
    clientClientId?: true
    _all?: true
  }

  export type DailyUsageSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyUsageSummary to aggregate.
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyUsageSummaries to fetch.
     */
    orderBy?: DailyUsageSummaryOrderByWithRelationInput | DailyUsageSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyUsageSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyUsageSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyUsageSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyUsageSummaries
    **/
    _count?: true | DailyUsageSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyUsageSummaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyUsageSummarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyUsageSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyUsageSummaryMaxAggregateInputType
  }

  export type GetDailyUsageSummaryAggregateType<T extends DailyUsageSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyUsageSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyUsageSummary[P]>
      : GetScalarType<T[P], AggregateDailyUsageSummary[P]>
  }




  export type DailyUsageSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyUsageSummaryWhereInput
    orderBy?: DailyUsageSummaryOrderByWithAggregationInput | DailyUsageSummaryOrderByWithAggregationInput[]
    by: DailyUsageSummaryScalarFieldEnum[] | DailyUsageSummaryScalarFieldEnum
    having?: DailyUsageSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyUsageSummaryCountAggregateInputType | true
    _avg?: DailyUsageSummaryAvgAggregateInputType
    _sum?: DailyUsageSummarySumAggregateInputType
    _min?: DailyUsageSummaryMinAggregateInputType
    _max?: DailyUsageSummaryMaxAggregateInputType
  }

  export type DailyUsageSummaryGroupByOutputType = {
    id: string
    date: Date
    equipmentId: string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    clientClientId: string | null
    _count: DailyUsageSummaryCountAggregateOutputType | null
    _avg: DailyUsageSummaryAvgAggregateOutputType | null
    _sum: DailyUsageSummarySumAggregateOutputType | null
    _min: DailyUsageSummaryMinAggregateOutputType | null
    _max: DailyUsageSummaryMaxAggregateOutputType | null
  }

  type GetDailyUsageSummaryGroupByPayload<T extends DailyUsageSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyUsageSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyUsageSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyUsageSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], DailyUsageSummaryGroupByOutputType[P]>
        }
      >
    >


  export type DailyUsageSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    equipmentId?: boolean
    totalEngineHours?: boolean
    totalIdleHours?: boolean
    workingHours?: boolean
    fuelConsumed?: boolean
    distanceTraveled?: boolean
    highEngineTempAlerts?: boolean
    suddenFuelDrops?: boolean
    diagnosticErrors?: boolean
    clientClientId?: boolean
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    Client?: boolean | DailyUsageSummary$ClientArgs<ExtArgs>
  }, ExtArgs["result"]["dailyUsageSummary"]>

  export type DailyUsageSummarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    equipmentId?: boolean
    totalEngineHours?: boolean
    totalIdleHours?: boolean
    workingHours?: boolean
    fuelConsumed?: boolean
    distanceTraveled?: boolean
    highEngineTempAlerts?: boolean
    suddenFuelDrops?: boolean
    diagnosticErrors?: boolean
    clientClientId?: boolean
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    Client?: boolean | DailyUsageSummary$ClientArgs<ExtArgs>
  }, ExtArgs["result"]["dailyUsageSummary"]>

  export type DailyUsageSummarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    equipmentId?: boolean
    totalEngineHours?: boolean
    totalIdleHours?: boolean
    workingHours?: boolean
    fuelConsumed?: boolean
    distanceTraveled?: boolean
    highEngineTempAlerts?: boolean
    suddenFuelDrops?: boolean
    diagnosticErrors?: boolean
    clientClientId?: boolean
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    Client?: boolean | DailyUsageSummary$ClientArgs<ExtArgs>
  }, ExtArgs["result"]["dailyUsageSummary"]>

  export type DailyUsageSummarySelectScalar = {
    id?: boolean
    date?: boolean
    equipmentId?: boolean
    totalEngineHours?: boolean
    totalIdleHours?: boolean
    workingHours?: boolean
    fuelConsumed?: boolean
    distanceTraveled?: boolean
    highEngineTempAlerts?: boolean
    suddenFuelDrops?: boolean
    diagnosticErrors?: boolean
    clientClientId?: boolean
  }

  export type DailyUsageSummaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "equipmentId" | "totalEngineHours" | "totalIdleHours" | "workingHours" | "fuelConsumed" | "distanceTraveled" | "highEngineTempAlerts" | "suddenFuelDrops" | "diagnosticErrors" | "clientClientId", ExtArgs["result"]["dailyUsageSummary"]>
  export type DailyUsageSummaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    Client?: boolean | DailyUsageSummary$ClientArgs<ExtArgs>
  }
  export type DailyUsageSummaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    Client?: boolean | DailyUsageSummary$ClientArgs<ExtArgs>
  }
  export type DailyUsageSummaryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipment?: boolean | EquipmentDefaultArgs<ExtArgs>
    Client?: boolean | DailyUsageSummary$ClientArgs<ExtArgs>
  }

  export type $DailyUsageSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyUsageSummary"
    objects: {
      equipment: Prisma.$EquipmentPayload<ExtArgs>
      Client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      equipmentId: string
      totalEngineHours: number
      totalIdleHours: number
      workingHours: number
      fuelConsumed: number
      distanceTraveled: number | null
      highEngineTempAlerts: number
      suddenFuelDrops: number
      diagnosticErrors: number
      clientClientId: string | null
    }, ExtArgs["result"]["dailyUsageSummary"]>
    composites: {}
  }

  type DailyUsageSummaryGetPayload<S extends boolean | null | undefined | DailyUsageSummaryDefaultArgs> = $Result.GetResult<Prisma.$DailyUsageSummaryPayload, S>

  type DailyUsageSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyUsageSummaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyUsageSummaryCountAggregateInputType | true
    }

  export interface DailyUsageSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyUsageSummary'], meta: { name: 'DailyUsageSummary' } }
    /**
     * Find zero or one DailyUsageSummary that matches the filter.
     * @param {DailyUsageSummaryFindUniqueArgs} args - Arguments to find a DailyUsageSummary
     * @example
     * // Get one DailyUsageSummary
     * const dailyUsageSummary = await prisma.dailyUsageSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyUsageSummaryFindUniqueArgs>(args: SelectSubset<T, DailyUsageSummaryFindUniqueArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyUsageSummary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyUsageSummaryFindUniqueOrThrowArgs} args - Arguments to find a DailyUsageSummary
     * @example
     * // Get one DailyUsageSummary
     * const dailyUsageSummary = await prisma.dailyUsageSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyUsageSummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyUsageSummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyUsageSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryFindFirstArgs} args - Arguments to find a DailyUsageSummary
     * @example
     * // Get one DailyUsageSummary
     * const dailyUsageSummary = await prisma.dailyUsageSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyUsageSummaryFindFirstArgs>(args?: SelectSubset<T, DailyUsageSummaryFindFirstArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyUsageSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryFindFirstOrThrowArgs} args - Arguments to find a DailyUsageSummary
     * @example
     * // Get one DailyUsageSummary
     * const dailyUsageSummary = await prisma.dailyUsageSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyUsageSummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyUsageSummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyUsageSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyUsageSummaries
     * const dailyUsageSummaries = await prisma.dailyUsageSummary.findMany()
     * 
     * // Get first 10 DailyUsageSummaries
     * const dailyUsageSummaries = await prisma.dailyUsageSummary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyUsageSummaryWithIdOnly = await prisma.dailyUsageSummary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyUsageSummaryFindManyArgs>(args?: SelectSubset<T, DailyUsageSummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyUsageSummary.
     * @param {DailyUsageSummaryCreateArgs} args - Arguments to create a DailyUsageSummary.
     * @example
     * // Create one DailyUsageSummary
     * const DailyUsageSummary = await prisma.dailyUsageSummary.create({
     *   data: {
     *     // ... data to create a DailyUsageSummary
     *   }
     * })
     * 
     */
    create<T extends DailyUsageSummaryCreateArgs>(args: SelectSubset<T, DailyUsageSummaryCreateArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyUsageSummaries.
     * @param {DailyUsageSummaryCreateManyArgs} args - Arguments to create many DailyUsageSummaries.
     * @example
     * // Create many DailyUsageSummaries
     * const dailyUsageSummary = await prisma.dailyUsageSummary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyUsageSummaryCreateManyArgs>(args?: SelectSubset<T, DailyUsageSummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyUsageSummaries and returns the data saved in the database.
     * @param {DailyUsageSummaryCreateManyAndReturnArgs} args - Arguments to create many DailyUsageSummaries.
     * @example
     * // Create many DailyUsageSummaries
     * const dailyUsageSummary = await prisma.dailyUsageSummary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyUsageSummaries and only return the `id`
     * const dailyUsageSummaryWithIdOnly = await prisma.dailyUsageSummary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyUsageSummaryCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyUsageSummaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyUsageSummary.
     * @param {DailyUsageSummaryDeleteArgs} args - Arguments to delete one DailyUsageSummary.
     * @example
     * // Delete one DailyUsageSummary
     * const DailyUsageSummary = await prisma.dailyUsageSummary.delete({
     *   where: {
     *     // ... filter to delete one DailyUsageSummary
     *   }
     * })
     * 
     */
    delete<T extends DailyUsageSummaryDeleteArgs>(args: SelectSubset<T, DailyUsageSummaryDeleteArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyUsageSummary.
     * @param {DailyUsageSummaryUpdateArgs} args - Arguments to update one DailyUsageSummary.
     * @example
     * // Update one DailyUsageSummary
     * const dailyUsageSummary = await prisma.dailyUsageSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyUsageSummaryUpdateArgs>(args: SelectSubset<T, DailyUsageSummaryUpdateArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyUsageSummaries.
     * @param {DailyUsageSummaryDeleteManyArgs} args - Arguments to filter DailyUsageSummaries to delete.
     * @example
     * // Delete a few DailyUsageSummaries
     * const { count } = await prisma.dailyUsageSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyUsageSummaryDeleteManyArgs>(args?: SelectSubset<T, DailyUsageSummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyUsageSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyUsageSummaries
     * const dailyUsageSummary = await prisma.dailyUsageSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyUsageSummaryUpdateManyArgs>(args: SelectSubset<T, DailyUsageSummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyUsageSummaries and returns the data updated in the database.
     * @param {DailyUsageSummaryUpdateManyAndReturnArgs} args - Arguments to update many DailyUsageSummaries.
     * @example
     * // Update many DailyUsageSummaries
     * const dailyUsageSummary = await prisma.dailyUsageSummary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyUsageSummaries and only return the `id`
     * const dailyUsageSummaryWithIdOnly = await prisma.dailyUsageSummary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyUsageSummaryUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyUsageSummaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyUsageSummary.
     * @param {DailyUsageSummaryUpsertArgs} args - Arguments to update or create a DailyUsageSummary.
     * @example
     * // Update or create a DailyUsageSummary
     * const dailyUsageSummary = await prisma.dailyUsageSummary.upsert({
     *   create: {
     *     // ... data to create a DailyUsageSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyUsageSummary we want to update
     *   }
     * })
     */
    upsert<T extends DailyUsageSummaryUpsertArgs>(args: SelectSubset<T, DailyUsageSummaryUpsertArgs<ExtArgs>>): Prisma__DailyUsageSummaryClient<$Result.GetResult<Prisma.$DailyUsageSummaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyUsageSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryCountArgs} args - Arguments to filter DailyUsageSummaries to count.
     * @example
     * // Count the number of DailyUsageSummaries
     * const count = await prisma.dailyUsageSummary.count({
     *   where: {
     *     // ... the filter for the DailyUsageSummaries we want to count
     *   }
     * })
    **/
    count<T extends DailyUsageSummaryCountArgs>(
      args?: Subset<T, DailyUsageSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyUsageSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyUsageSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyUsageSummaryAggregateArgs>(args: Subset<T, DailyUsageSummaryAggregateArgs>): Prisma.PrismaPromise<GetDailyUsageSummaryAggregateType<T>>

    /**
     * Group by DailyUsageSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyUsageSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyUsageSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyUsageSummaryGroupByArgs['orderBy'] }
        : { orderBy?: DailyUsageSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyUsageSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyUsageSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyUsageSummary model
   */
  readonly fields: DailyUsageSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyUsageSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyUsageSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipment<T extends EquipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipmentDefaultArgs<ExtArgs>>): Prisma__EquipmentClient<$Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Client<T extends DailyUsageSummary$ClientArgs<ExtArgs> = {}>(args?: Subset<T, DailyUsageSummary$ClientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyUsageSummary model
   */
  interface DailyUsageSummaryFieldRefs {
    readonly id: FieldRef<"DailyUsageSummary", 'String'>
    readonly date: FieldRef<"DailyUsageSummary", 'DateTime'>
    readonly equipmentId: FieldRef<"DailyUsageSummary", 'String'>
    readonly totalEngineHours: FieldRef<"DailyUsageSummary", 'Float'>
    readonly totalIdleHours: FieldRef<"DailyUsageSummary", 'Float'>
    readonly workingHours: FieldRef<"DailyUsageSummary", 'Float'>
    readonly fuelConsumed: FieldRef<"DailyUsageSummary", 'Float'>
    readonly distanceTraveled: FieldRef<"DailyUsageSummary", 'Float'>
    readonly highEngineTempAlerts: FieldRef<"DailyUsageSummary", 'Int'>
    readonly suddenFuelDrops: FieldRef<"DailyUsageSummary", 'Int'>
    readonly diagnosticErrors: FieldRef<"DailyUsageSummary", 'Int'>
    readonly clientClientId: FieldRef<"DailyUsageSummary", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DailyUsageSummary findUnique
   */
  export type DailyUsageSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * Filter, which DailyUsageSummary to fetch.
     */
    where: DailyUsageSummaryWhereUniqueInput
  }

  /**
   * DailyUsageSummary findUniqueOrThrow
   */
  export type DailyUsageSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * Filter, which DailyUsageSummary to fetch.
     */
    where: DailyUsageSummaryWhereUniqueInput
  }

  /**
   * DailyUsageSummary findFirst
   */
  export type DailyUsageSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * Filter, which DailyUsageSummary to fetch.
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyUsageSummaries to fetch.
     */
    orderBy?: DailyUsageSummaryOrderByWithRelationInput | DailyUsageSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyUsageSummaries.
     */
    cursor?: DailyUsageSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyUsageSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyUsageSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyUsageSummaries.
     */
    distinct?: DailyUsageSummaryScalarFieldEnum | DailyUsageSummaryScalarFieldEnum[]
  }

  /**
   * DailyUsageSummary findFirstOrThrow
   */
  export type DailyUsageSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * Filter, which DailyUsageSummary to fetch.
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyUsageSummaries to fetch.
     */
    orderBy?: DailyUsageSummaryOrderByWithRelationInput | DailyUsageSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyUsageSummaries.
     */
    cursor?: DailyUsageSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyUsageSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyUsageSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyUsageSummaries.
     */
    distinct?: DailyUsageSummaryScalarFieldEnum | DailyUsageSummaryScalarFieldEnum[]
  }

  /**
   * DailyUsageSummary findMany
   */
  export type DailyUsageSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * Filter, which DailyUsageSummaries to fetch.
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyUsageSummaries to fetch.
     */
    orderBy?: DailyUsageSummaryOrderByWithRelationInput | DailyUsageSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyUsageSummaries.
     */
    cursor?: DailyUsageSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyUsageSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyUsageSummaries.
     */
    skip?: number
    distinct?: DailyUsageSummaryScalarFieldEnum | DailyUsageSummaryScalarFieldEnum[]
  }

  /**
   * DailyUsageSummary create
   */
  export type DailyUsageSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyUsageSummary.
     */
    data: XOR<DailyUsageSummaryCreateInput, DailyUsageSummaryUncheckedCreateInput>
  }

  /**
   * DailyUsageSummary createMany
   */
  export type DailyUsageSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyUsageSummaries.
     */
    data: DailyUsageSummaryCreateManyInput | DailyUsageSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyUsageSummary createManyAndReturn
   */
  export type DailyUsageSummaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * The data used to create many DailyUsageSummaries.
     */
    data: DailyUsageSummaryCreateManyInput | DailyUsageSummaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyUsageSummary update
   */
  export type DailyUsageSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyUsageSummary.
     */
    data: XOR<DailyUsageSummaryUpdateInput, DailyUsageSummaryUncheckedUpdateInput>
    /**
     * Choose, which DailyUsageSummary to update.
     */
    where: DailyUsageSummaryWhereUniqueInput
  }

  /**
   * DailyUsageSummary updateMany
   */
  export type DailyUsageSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyUsageSummaries.
     */
    data: XOR<DailyUsageSummaryUpdateManyMutationInput, DailyUsageSummaryUncheckedUpdateManyInput>
    /**
     * Filter which DailyUsageSummaries to update
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * Limit how many DailyUsageSummaries to update.
     */
    limit?: number
  }

  /**
   * DailyUsageSummary updateManyAndReturn
   */
  export type DailyUsageSummaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * The data used to update DailyUsageSummaries.
     */
    data: XOR<DailyUsageSummaryUpdateManyMutationInput, DailyUsageSummaryUncheckedUpdateManyInput>
    /**
     * Filter which DailyUsageSummaries to update
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * Limit how many DailyUsageSummaries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyUsageSummary upsert
   */
  export type DailyUsageSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyUsageSummary to update in case it exists.
     */
    where: DailyUsageSummaryWhereUniqueInput
    /**
     * In case the DailyUsageSummary found by the `where` argument doesn't exist, create a new DailyUsageSummary with this data.
     */
    create: XOR<DailyUsageSummaryCreateInput, DailyUsageSummaryUncheckedCreateInput>
    /**
     * In case the DailyUsageSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyUsageSummaryUpdateInput, DailyUsageSummaryUncheckedUpdateInput>
  }

  /**
   * DailyUsageSummary delete
   */
  export type DailyUsageSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
    /**
     * Filter which DailyUsageSummary to delete.
     */
    where: DailyUsageSummaryWhereUniqueInput
  }

  /**
   * DailyUsageSummary deleteMany
   */
  export type DailyUsageSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyUsageSummaries to delete
     */
    where?: DailyUsageSummaryWhereInput
    /**
     * Limit how many DailyUsageSummaries to delete.
     */
    limit?: number
  }

  /**
   * DailyUsageSummary.Client
   */
  export type DailyUsageSummary$ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * DailyUsageSummary without action
   */
  export type DailyUsageSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyUsageSummary
     */
    select?: DailyUsageSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyUsageSummary
     */
    omit?: DailyUsageSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyUsageSummaryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClientScalarFieldEnum: {
    clientId: 'clientId',
    name: 'name',
    email: 'email',
    phone: 'phone'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const EquipmentTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type EquipmentTypeScalarFieldEnum = (typeof EquipmentTypeScalarFieldEnum)[keyof typeof EquipmentTypeScalarFieldEnum]


  export const EquipmentScalarFieldEnum: {
    equipmentId: 'equipmentId',
    status: 'status',
    equipmentTypeId: 'equipmentTypeId'
  };

  export type EquipmentScalarFieldEnum = (typeof EquipmentScalarFieldEnum)[keyof typeof EquipmentScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    contractId: 'contractId',
    siteId: 'siteId',
    startDate: 'startDate',
    endDate: 'endDate',
    clientId: 'clientId'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const LineItemScalarFieldEnum: {
    lineItemId: 'lineItemId',
    startDate: 'startDate',
    endDate: 'endDate',
    totalEngineHours: 'totalEngineHours',
    fuelUsage: 'fuelUsage',
    downtimeHours: 'downtimeHours',
    operatingDays: 'operatingDays',
    contractId: 'contractId',
    equipmentId: 'equipmentId',
    lastOperatorId: 'lastOperatorId'
  };

  export type LineItemScalarFieldEnum = (typeof LineItemScalarFieldEnum)[keyof typeof LineItemScalarFieldEnum]


  export const OperatorScalarFieldEnum: {
    operatorId: 'operatorId',
    name: 'name'
  };

  export type OperatorScalarFieldEnum = (typeof OperatorScalarFieldEnum)[keyof typeof OperatorScalarFieldEnum]


  export const WaitingListScalarFieldEnum: {
    requestId: 'requestId',
    clientId: 'clientId',
    equipmentTypeId: 'equipmentTypeId',
    quantity: 'quantity',
    requestedStartDate: 'requestedStartDate',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type WaitingListScalarFieldEnum = (typeof WaitingListScalarFieldEnum)[keyof typeof WaitingListScalarFieldEnum]


  export const RawEventLogScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    equipmentId: 'equipmentId',
    eventType: 'eventType',
    value: 'value',
    isProcessed: 'isProcessed'
  };

  export type RawEventLogScalarFieldEnum = (typeof RawEventLogScalarFieldEnum)[keyof typeof RawEventLogScalarFieldEnum]


  export const DailyUsageSummaryScalarFieldEnum: {
    id: 'id',
    date: 'date',
    equipmentId: 'equipmentId',
    totalEngineHours: 'totalEngineHours',
    totalIdleHours: 'totalIdleHours',
    workingHours: 'workingHours',
    fuelConsumed: 'fuelConsumed',
    distanceTraveled: 'distanceTraveled',
    highEngineTempAlerts: 'highEngineTempAlerts',
    suddenFuelDrops: 'suddenFuelDrops',
    diagnosticErrors: 'diagnosticErrors',
    clientClientId: 'clientClientId'
  };

  export type DailyUsageSummaryScalarFieldEnum = (typeof DailyUsageSummaryScalarFieldEnum)[keyof typeof DailyUsageSummaryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'EventType'
   */
  export type EnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType'>
    


  /**
   * Reference to a field of type 'EventType[]'
   */
  export type ListEnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    clientId?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    phone?: StringNullableFilter<"Client"> | string | null
    contracts?: ContractListRelationFilter
    dailySummaries?: DailyUsageSummaryListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    clientId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    contracts?: ContractOrderByRelationAggregateInput
    dailySummaries?: DailyUsageSummaryOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    clientId?: string
    email?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    phone?: StringNullableFilter<"Client"> | string | null
    contracts?: ContractListRelationFilter
    dailySummaries?: DailyUsageSummaryListRelationFilter
  }, "clientId" | "email">

  export type ClientOrderByWithAggregationInput = {
    clientId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    clientId?: StringWithAggregatesFilter<"Client"> | string
    name?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
    phone?: StringNullableWithAggregatesFilter<"Client"> | string | null
  }

  export type EquipmentTypeWhereInput = {
    AND?: EquipmentTypeWhereInput | EquipmentTypeWhereInput[]
    OR?: EquipmentTypeWhereInput[]
    NOT?: EquipmentTypeWhereInput | EquipmentTypeWhereInput[]
    id?: StringFilter<"EquipmentType"> | string
    name?: StringFilter<"EquipmentType"> | string
    equipment?: EquipmentListRelationFilter
    waitingListItems?: WaitingListListRelationFilter
  }

  export type EquipmentTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    equipment?: EquipmentOrderByRelationAggregateInput
    waitingListItems?: WaitingListOrderByRelationAggregateInput
  }

  export type EquipmentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: EquipmentTypeWhereInput | EquipmentTypeWhereInput[]
    OR?: EquipmentTypeWhereInput[]
    NOT?: EquipmentTypeWhereInput | EquipmentTypeWhereInput[]
    equipment?: EquipmentListRelationFilter
    waitingListItems?: WaitingListListRelationFilter
  }, "id" | "name">

  export type EquipmentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: EquipmentTypeCountOrderByAggregateInput
    _max?: EquipmentTypeMaxOrderByAggregateInput
    _min?: EquipmentTypeMinOrderByAggregateInput
  }

  export type EquipmentTypeScalarWhereWithAggregatesInput = {
    AND?: EquipmentTypeScalarWhereWithAggregatesInput | EquipmentTypeScalarWhereWithAggregatesInput[]
    OR?: EquipmentTypeScalarWhereWithAggregatesInput[]
    NOT?: EquipmentTypeScalarWhereWithAggregatesInput | EquipmentTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EquipmentType"> | string
    name?: StringWithAggregatesFilter<"EquipmentType"> | string
  }

  export type EquipmentWhereInput = {
    AND?: EquipmentWhereInput | EquipmentWhereInput[]
    OR?: EquipmentWhereInput[]
    NOT?: EquipmentWhereInput | EquipmentWhereInput[]
    equipmentId?: StringFilter<"Equipment"> | string
    status?: StringFilter<"Equipment"> | string
    equipmentTypeId?: StringFilter<"Equipment"> | string
    equipmentType?: XOR<EquipmentTypeScalarRelationFilter, EquipmentTypeWhereInput>
    lineItems?: LineItemListRelationFilter
    DailyUsageSummary?: DailyUsageSummaryListRelationFilter
  }

  export type EquipmentOrderByWithRelationInput = {
    equipmentId?: SortOrder
    status?: SortOrder
    equipmentTypeId?: SortOrder
    equipmentType?: EquipmentTypeOrderByWithRelationInput
    lineItems?: LineItemOrderByRelationAggregateInput
    DailyUsageSummary?: DailyUsageSummaryOrderByRelationAggregateInput
  }

  export type EquipmentWhereUniqueInput = Prisma.AtLeast<{
    equipmentId?: string
    AND?: EquipmentWhereInput | EquipmentWhereInput[]
    OR?: EquipmentWhereInput[]
    NOT?: EquipmentWhereInput | EquipmentWhereInput[]
    status?: StringFilter<"Equipment"> | string
    equipmentTypeId?: StringFilter<"Equipment"> | string
    equipmentType?: XOR<EquipmentTypeScalarRelationFilter, EquipmentTypeWhereInput>
    lineItems?: LineItemListRelationFilter
    DailyUsageSummary?: DailyUsageSummaryListRelationFilter
  }, "equipmentId">

  export type EquipmentOrderByWithAggregationInput = {
    equipmentId?: SortOrder
    status?: SortOrder
    equipmentTypeId?: SortOrder
    _count?: EquipmentCountOrderByAggregateInput
    _max?: EquipmentMaxOrderByAggregateInput
    _min?: EquipmentMinOrderByAggregateInput
  }

  export type EquipmentScalarWhereWithAggregatesInput = {
    AND?: EquipmentScalarWhereWithAggregatesInput | EquipmentScalarWhereWithAggregatesInput[]
    OR?: EquipmentScalarWhereWithAggregatesInput[]
    NOT?: EquipmentScalarWhereWithAggregatesInput | EquipmentScalarWhereWithAggregatesInput[]
    equipmentId?: StringWithAggregatesFilter<"Equipment"> | string
    status?: StringWithAggregatesFilter<"Equipment"> | string
    equipmentTypeId?: StringWithAggregatesFilter<"Equipment"> | string
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    contractId?: StringFilter<"Contract"> | string
    siteId?: StringFilter<"Contract"> | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    clientId?: StringFilter<"Contract"> | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    lineItems?: LineItemListRelationFilter
  }

  export type ContractOrderByWithRelationInput = {
    contractId?: SortOrder
    siteId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    clientId?: SortOrder
    client?: ClientOrderByWithRelationInput
    lineItems?: LineItemOrderByRelationAggregateInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    contractId?: string
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    siteId?: StringFilter<"Contract"> | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    clientId?: StringFilter<"Contract"> | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    lineItems?: LineItemListRelationFilter
  }, "contractId">

  export type ContractOrderByWithAggregationInput = {
    contractId?: SortOrder
    siteId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    clientId?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    contractId?: StringWithAggregatesFilter<"Contract"> | string
    siteId?: StringWithAggregatesFilter<"Contract"> | string
    startDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    clientId?: StringWithAggregatesFilter<"Contract"> | string
  }

  export type LineItemWhereInput = {
    AND?: LineItemWhereInput | LineItemWhereInput[]
    OR?: LineItemWhereInput[]
    NOT?: LineItemWhereInput | LineItemWhereInput[]
    lineItemId?: StringFilter<"LineItem"> | string
    startDate?: DateTimeFilter<"LineItem"> | Date | string
    endDate?: DateTimeFilter<"LineItem"> | Date | string
    totalEngineHours?: FloatNullableFilter<"LineItem"> | number | null
    fuelUsage?: FloatNullableFilter<"LineItem"> | number | null
    downtimeHours?: FloatNullableFilter<"LineItem"> | number | null
    operatingDays?: IntNullableFilter<"LineItem"> | number | null
    contractId?: StringFilter<"LineItem"> | string
    equipmentId?: StringFilter<"LineItem"> | string
    lastOperatorId?: StringNullableFilter<"LineItem"> | string | null
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    equipment?: XOR<EquipmentScalarRelationFilter, EquipmentWhereInput>
    operator?: XOR<OperatorNullableScalarRelationFilter, OperatorWhereInput> | null
  }

  export type LineItemOrderByWithRelationInput = {
    lineItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalEngineHours?: SortOrderInput | SortOrder
    fuelUsage?: SortOrderInput | SortOrder
    downtimeHours?: SortOrderInput | SortOrder
    operatingDays?: SortOrderInput | SortOrder
    contractId?: SortOrder
    equipmentId?: SortOrder
    lastOperatorId?: SortOrderInput | SortOrder
    contract?: ContractOrderByWithRelationInput
    equipment?: EquipmentOrderByWithRelationInput
    operator?: OperatorOrderByWithRelationInput
  }

  export type LineItemWhereUniqueInput = Prisma.AtLeast<{
    lineItemId?: string
    AND?: LineItemWhereInput | LineItemWhereInput[]
    OR?: LineItemWhereInput[]
    NOT?: LineItemWhereInput | LineItemWhereInput[]
    startDate?: DateTimeFilter<"LineItem"> | Date | string
    endDate?: DateTimeFilter<"LineItem"> | Date | string
    totalEngineHours?: FloatNullableFilter<"LineItem"> | number | null
    fuelUsage?: FloatNullableFilter<"LineItem"> | number | null
    downtimeHours?: FloatNullableFilter<"LineItem"> | number | null
    operatingDays?: IntNullableFilter<"LineItem"> | number | null
    contractId?: StringFilter<"LineItem"> | string
    equipmentId?: StringFilter<"LineItem"> | string
    lastOperatorId?: StringNullableFilter<"LineItem"> | string | null
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    equipment?: XOR<EquipmentScalarRelationFilter, EquipmentWhereInput>
    operator?: XOR<OperatorNullableScalarRelationFilter, OperatorWhereInput> | null
  }, "lineItemId">

  export type LineItemOrderByWithAggregationInput = {
    lineItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalEngineHours?: SortOrderInput | SortOrder
    fuelUsage?: SortOrderInput | SortOrder
    downtimeHours?: SortOrderInput | SortOrder
    operatingDays?: SortOrderInput | SortOrder
    contractId?: SortOrder
    equipmentId?: SortOrder
    lastOperatorId?: SortOrderInput | SortOrder
    _count?: LineItemCountOrderByAggregateInput
    _avg?: LineItemAvgOrderByAggregateInput
    _max?: LineItemMaxOrderByAggregateInput
    _min?: LineItemMinOrderByAggregateInput
    _sum?: LineItemSumOrderByAggregateInput
  }

  export type LineItemScalarWhereWithAggregatesInput = {
    AND?: LineItemScalarWhereWithAggregatesInput | LineItemScalarWhereWithAggregatesInput[]
    OR?: LineItemScalarWhereWithAggregatesInput[]
    NOT?: LineItemScalarWhereWithAggregatesInput | LineItemScalarWhereWithAggregatesInput[]
    lineItemId?: StringWithAggregatesFilter<"LineItem"> | string
    startDate?: DateTimeWithAggregatesFilter<"LineItem"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LineItem"> | Date | string
    totalEngineHours?: FloatNullableWithAggregatesFilter<"LineItem"> | number | null
    fuelUsage?: FloatNullableWithAggregatesFilter<"LineItem"> | number | null
    downtimeHours?: FloatNullableWithAggregatesFilter<"LineItem"> | number | null
    operatingDays?: IntNullableWithAggregatesFilter<"LineItem"> | number | null
    contractId?: StringWithAggregatesFilter<"LineItem"> | string
    equipmentId?: StringWithAggregatesFilter<"LineItem"> | string
    lastOperatorId?: StringNullableWithAggregatesFilter<"LineItem"> | string | null
  }

  export type OperatorWhereInput = {
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    operatorId?: StringFilter<"Operator"> | string
    name?: StringFilter<"Operator"> | string
    lineItems?: LineItemListRelationFilter
  }

  export type OperatorOrderByWithRelationInput = {
    operatorId?: SortOrder
    name?: SortOrder
    lineItems?: LineItemOrderByRelationAggregateInput
  }

  export type OperatorWhereUniqueInput = Prisma.AtLeast<{
    operatorId?: string
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    name?: StringFilter<"Operator"> | string
    lineItems?: LineItemListRelationFilter
  }, "operatorId">

  export type OperatorOrderByWithAggregationInput = {
    operatorId?: SortOrder
    name?: SortOrder
    _count?: OperatorCountOrderByAggregateInput
    _max?: OperatorMaxOrderByAggregateInput
    _min?: OperatorMinOrderByAggregateInput
  }

  export type OperatorScalarWhereWithAggregatesInput = {
    AND?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    OR?: OperatorScalarWhereWithAggregatesInput[]
    NOT?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    operatorId?: StringWithAggregatesFilter<"Operator"> | string
    name?: StringWithAggregatesFilter<"Operator"> | string
  }

  export type WaitingListWhereInput = {
    AND?: WaitingListWhereInput | WaitingListWhereInput[]
    OR?: WaitingListWhereInput[]
    NOT?: WaitingListWhereInput | WaitingListWhereInput[]
    requestId?: StringFilter<"WaitingList"> | string
    clientId?: StringFilter<"WaitingList"> | string
    equipmentTypeId?: StringFilter<"WaitingList"> | string
    quantity?: IntFilter<"WaitingList"> | number
    requestedStartDate?: DateTimeFilter<"WaitingList"> | Date | string
    status?: StringFilter<"WaitingList"> | string
    createdAt?: DateTimeFilter<"WaitingList"> | Date | string
    equipmentType?: XOR<EquipmentTypeScalarRelationFilter, EquipmentTypeWhereInput>
  }

  export type WaitingListOrderByWithRelationInput = {
    requestId?: SortOrder
    clientId?: SortOrder
    equipmentTypeId?: SortOrder
    quantity?: SortOrder
    requestedStartDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    equipmentType?: EquipmentTypeOrderByWithRelationInput
  }

  export type WaitingListWhereUniqueInput = Prisma.AtLeast<{
    requestId?: string
    AND?: WaitingListWhereInput | WaitingListWhereInput[]
    OR?: WaitingListWhereInput[]
    NOT?: WaitingListWhereInput | WaitingListWhereInput[]
    clientId?: StringFilter<"WaitingList"> | string
    equipmentTypeId?: StringFilter<"WaitingList"> | string
    quantity?: IntFilter<"WaitingList"> | number
    requestedStartDate?: DateTimeFilter<"WaitingList"> | Date | string
    status?: StringFilter<"WaitingList"> | string
    createdAt?: DateTimeFilter<"WaitingList"> | Date | string
    equipmentType?: XOR<EquipmentTypeScalarRelationFilter, EquipmentTypeWhereInput>
  }, "requestId">

  export type WaitingListOrderByWithAggregationInput = {
    requestId?: SortOrder
    clientId?: SortOrder
    equipmentTypeId?: SortOrder
    quantity?: SortOrder
    requestedStartDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: WaitingListCountOrderByAggregateInput
    _avg?: WaitingListAvgOrderByAggregateInput
    _max?: WaitingListMaxOrderByAggregateInput
    _min?: WaitingListMinOrderByAggregateInput
    _sum?: WaitingListSumOrderByAggregateInput
  }

  export type WaitingListScalarWhereWithAggregatesInput = {
    AND?: WaitingListScalarWhereWithAggregatesInput | WaitingListScalarWhereWithAggregatesInput[]
    OR?: WaitingListScalarWhereWithAggregatesInput[]
    NOT?: WaitingListScalarWhereWithAggregatesInput | WaitingListScalarWhereWithAggregatesInput[]
    requestId?: StringWithAggregatesFilter<"WaitingList"> | string
    clientId?: StringWithAggregatesFilter<"WaitingList"> | string
    equipmentTypeId?: StringWithAggregatesFilter<"WaitingList"> | string
    quantity?: IntWithAggregatesFilter<"WaitingList"> | number
    requestedStartDate?: DateTimeWithAggregatesFilter<"WaitingList"> | Date | string
    status?: StringWithAggregatesFilter<"WaitingList"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WaitingList"> | Date | string
  }

  export type RawEventLogWhereInput = {
    AND?: RawEventLogWhereInput | RawEventLogWhereInput[]
    OR?: RawEventLogWhereInput[]
    NOT?: RawEventLogWhereInput | RawEventLogWhereInput[]
    id?: StringFilter<"RawEventLog"> | string
    timestamp?: DateTimeFilter<"RawEventLog"> | Date | string
    equipmentId?: StringFilter<"RawEventLog"> | string
    eventType?: EnumEventTypeFilter<"RawEventLog"> | $Enums.EventType
    value?: JsonFilter<"RawEventLog">
    isProcessed?: BoolFilter<"RawEventLog"> | boolean
  }

  export type RawEventLogOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    equipmentId?: SortOrder
    eventType?: SortOrder
    value?: SortOrder
    isProcessed?: SortOrder
  }

  export type RawEventLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RawEventLogWhereInput | RawEventLogWhereInput[]
    OR?: RawEventLogWhereInput[]
    NOT?: RawEventLogWhereInput | RawEventLogWhereInput[]
    timestamp?: DateTimeFilter<"RawEventLog"> | Date | string
    equipmentId?: StringFilter<"RawEventLog"> | string
    eventType?: EnumEventTypeFilter<"RawEventLog"> | $Enums.EventType
    value?: JsonFilter<"RawEventLog">
    isProcessed?: BoolFilter<"RawEventLog"> | boolean
  }, "id">

  export type RawEventLogOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    equipmentId?: SortOrder
    eventType?: SortOrder
    value?: SortOrder
    isProcessed?: SortOrder
    _count?: RawEventLogCountOrderByAggregateInput
    _max?: RawEventLogMaxOrderByAggregateInput
    _min?: RawEventLogMinOrderByAggregateInput
  }

  export type RawEventLogScalarWhereWithAggregatesInput = {
    AND?: RawEventLogScalarWhereWithAggregatesInput | RawEventLogScalarWhereWithAggregatesInput[]
    OR?: RawEventLogScalarWhereWithAggregatesInput[]
    NOT?: RawEventLogScalarWhereWithAggregatesInput | RawEventLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RawEventLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"RawEventLog"> | Date | string
    equipmentId?: StringWithAggregatesFilter<"RawEventLog"> | string
    eventType?: EnumEventTypeWithAggregatesFilter<"RawEventLog"> | $Enums.EventType
    value?: JsonWithAggregatesFilter<"RawEventLog">
    isProcessed?: BoolWithAggregatesFilter<"RawEventLog"> | boolean
  }

  export type DailyUsageSummaryWhereInput = {
    AND?: DailyUsageSummaryWhereInput | DailyUsageSummaryWhereInput[]
    OR?: DailyUsageSummaryWhereInput[]
    NOT?: DailyUsageSummaryWhereInput | DailyUsageSummaryWhereInput[]
    id?: StringFilter<"DailyUsageSummary"> | string
    date?: DateTimeFilter<"DailyUsageSummary"> | Date | string
    equipmentId?: StringFilter<"DailyUsageSummary"> | string
    totalEngineHours?: FloatFilter<"DailyUsageSummary"> | number
    totalIdleHours?: FloatFilter<"DailyUsageSummary"> | number
    workingHours?: FloatFilter<"DailyUsageSummary"> | number
    fuelConsumed?: FloatFilter<"DailyUsageSummary"> | number
    distanceTraveled?: FloatNullableFilter<"DailyUsageSummary"> | number | null
    highEngineTempAlerts?: IntFilter<"DailyUsageSummary"> | number
    suddenFuelDrops?: IntFilter<"DailyUsageSummary"> | number
    diagnosticErrors?: IntFilter<"DailyUsageSummary"> | number
    clientClientId?: StringNullableFilter<"DailyUsageSummary"> | string | null
    equipment?: XOR<EquipmentScalarRelationFilter, EquipmentWhereInput>
    Client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }

  export type DailyUsageSummaryOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    equipmentId?: SortOrder
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrderInput | SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
    clientClientId?: SortOrderInput | SortOrder
    equipment?: EquipmentOrderByWithRelationInput
    Client?: ClientOrderByWithRelationInput
  }

  export type DailyUsageSummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    equipmentId_date?: DailyUsageSummaryEquipmentIdDateCompoundUniqueInput
    AND?: DailyUsageSummaryWhereInput | DailyUsageSummaryWhereInput[]
    OR?: DailyUsageSummaryWhereInput[]
    NOT?: DailyUsageSummaryWhereInput | DailyUsageSummaryWhereInput[]
    date?: DateTimeFilter<"DailyUsageSummary"> | Date | string
    equipmentId?: StringFilter<"DailyUsageSummary"> | string
    totalEngineHours?: FloatFilter<"DailyUsageSummary"> | number
    totalIdleHours?: FloatFilter<"DailyUsageSummary"> | number
    workingHours?: FloatFilter<"DailyUsageSummary"> | number
    fuelConsumed?: FloatFilter<"DailyUsageSummary"> | number
    distanceTraveled?: FloatNullableFilter<"DailyUsageSummary"> | number | null
    highEngineTempAlerts?: IntFilter<"DailyUsageSummary"> | number
    suddenFuelDrops?: IntFilter<"DailyUsageSummary"> | number
    diagnosticErrors?: IntFilter<"DailyUsageSummary"> | number
    clientClientId?: StringNullableFilter<"DailyUsageSummary"> | string | null
    equipment?: XOR<EquipmentScalarRelationFilter, EquipmentWhereInput>
    Client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }, "id" | "equipmentId_date">

  export type DailyUsageSummaryOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    equipmentId?: SortOrder
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrderInput | SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
    clientClientId?: SortOrderInput | SortOrder
    _count?: DailyUsageSummaryCountOrderByAggregateInput
    _avg?: DailyUsageSummaryAvgOrderByAggregateInput
    _max?: DailyUsageSummaryMaxOrderByAggregateInput
    _min?: DailyUsageSummaryMinOrderByAggregateInput
    _sum?: DailyUsageSummarySumOrderByAggregateInput
  }

  export type DailyUsageSummaryScalarWhereWithAggregatesInput = {
    AND?: DailyUsageSummaryScalarWhereWithAggregatesInput | DailyUsageSummaryScalarWhereWithAggregatesInput[]
    OR?: DailyUsageSummaryScalarWhereWithAggregatesInput[]
    NOT?: DailyUsageSummaryScalarWhereWithAggregatesInput | DailyUsageSummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyUsageSummary"> | string
    date?: DateTimeWithAggregatesFilter<"DailyUsageSummary"> | Date | string
    equipmentId?: StringWithAggregatesFilter<"DailyUsageSummary"> | string
    totalEngineHours?: FloatWithAggregatesFilter<"DailyUsageSummary"> | number
    totalIdleHours?: FloatWithAggregatesFilter<"DailyUsageSummary"> | number
    workingHours?: FloatWithAggregatesFilter<"DailyUsageSummary"> | number
    fuelConsumed?: FloatWithAggregatesFilter<"DailyUsageSummary"> | number
    distanceTraveled?: FloatNullableWithAggregatesFilter<"DailyUsageSummary"> | number | null
    highEngineTempAlerts?: IntWithAggregatesFilter<"DailyUsageSummary"> | number
    suddenFuelDrops?: IntWithAggregatesFilter<"DailyUsageSummary"> | number
    diagnosticErrors?: IntWithAggregatesFilter<"DailyUsageSummary"> | number
    clientClientId?: StringNullableWithAggregatesFilter<"DailyUsageSummary"> | string | null
  }

  export type ClientCreateInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
    contracts?: ContractCreateNestedManyWithoutClientInput
    dailySummaries?: DailyUsageSummaryCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    dailySummaries?: DailyUsageSummaryUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutClientNestedInput
    dailySummaries?: DailyUsageSummaryUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    dailySummaries?: DailyUsageSummaryUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
  }

  export type ClientUpdateManyMutationInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClientUncheckedUpdateManyInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EquipmentTypeCreateInput = {
    id?: string
    name: string
    equipment?: EquipmentCreateNestedManyWithoutEquipmentTypeInput
    waitingListItems?: WaitingListCreateNestedManyWithoutEquipmentTypeInput
  }

  export type EquipmentTypeUncheckedCreateInput = {
    id?: string
    name: string
    equipment?: EquipmentUncheckedCreateNestedManyWithoutEquipmentTypeInput
    waitingListItems?: WaitingListUncheckedCreateNestedManyWithoutEquipmentTypeInput
  }

  export type EquipmentTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    equipment?: EquipmentUpdateManyWithoutEquipmentTypeNestedInput
    waitingListItems?: WaitingListUpdateManyWithoutEquipmentTypeNestedInput
  }

  export type EquipmentTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    equipment?: EquipmentUncheckedUpdateManyWithoutEquipmentTypeNestedInput
    waitingListItems?: WaitingListUncheckedUpdateManyWithoutEquipmentTypeNestedInput
  }

  export type EquipmentTypeCreateManyInput = {
    id?: string
    name: string
  }

  export type EquipmentTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EquipmentTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EquipmentCreateInput = {
    equipmentId?: string
    status?: string
    equipmentType: EquipmentTypeCreateNestedOneWithoutEquipmentInput
    lineItems?: LineItemCreateNestedManyWithoutEquipmentInput
    DailyUsageSummary?: DailyUsageSummaryCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUncheckedCreateInput = {
    equipmentId?: string
    status?: string
    equipmentTypeId: string
    lineItems?: LineItemUncheckedCreateNestedManyWithoutEquipmentInput
    DailyUsageSummary?: DailyUsageSummaryUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUpdateInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentType?: EquipmentTypeUpdateOneRequiredWithoutEquipmentNestedInput
    lineItems?: LineItemUpdateManyWithoutEquipmentNestedInput
    DailyUsageSummary?: DailyUsageSummaryUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentTypeId?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUncheckedUpdateManyWithoutEquipmentNestedInput
    DailyUsageSummary?: DailyUsageSummaryUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentCreateManyInput = {
    equipmentId?: string
    status?: string
    equipmentTypeId: string
  }

  export type EquipmentUpdateManyMutationInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EquipmentUncheckedUpdateManyInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentTypeId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractCreateInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    lineItems?: LineItemCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    clientId: string
    lineItems?: LineItemUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractUpdateInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    lineItems?: LineItemUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractCreateManyInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    clientId: string
  }

  export type ContractUpdateManyMutationInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type LineItemCreateInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contract: ContractCreateNestedOneWithoutLineItemsInput
    equipment: EquipmentCreateNestedOneWithoutLineItemsInput
    operator?: OperatorCreateNestedOneWithoutLineItemsInput
  }

  export type LineItemUncheckedCreateInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contractId: string
    equipmentId: string
    lastOperatorId?: string | null
  }

  export type LineItemUpdateInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contract?: ContractUpdateOneRequiredWithoutLineItemsNestedInput
    equipment?: EquipmentUpdateOneRequiredWithoutLineItemsNestedInput
    operator?: OperatorUpdateOneWithoutLineItemsNestedInput
  }

  export type LineItemUncheckedUpdateInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contractId?: StringFieldUpdateOperationsInput | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    lastOperatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LineItemCreateManyInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contractId: string
    equipmentId: string
    lastOperatorId?: string | null
  }

  export type LineItemUpdateManyMutationInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LineItemUncheckedUpdateManyInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contractId?: StringFieldUpdateOperationsInput | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    lastOperatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OperatorCreateInput = {
    operatorId?: string
    name: string
    lineItems?: LineItemCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUncheckedCreateInput = {
    operatorId?: string
    name: string
    lineItems?: LineItemUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUpdateInput = {
    operatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorUncheckedUpdateInput = {
    operatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorCreateManyInput = {
    operatorId?: string
    name: string
  }

  export type OperatorUpdateManyMutationInput = {
    operatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OperatorUncheckedUpdateManyInput = {
    operatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WaitingListCreateInput = {
    requestId?: string
    clientId: string
    quantity: number
    requestedStartDate: Date | string
    status?: string
    createdAt?: Date | string
    equipmentType: EquipmentTypeCreateNestedOneWithoutWaitingListItemsInput
  }

  export type WaitingListUncheckedCreateInput = {
    requestId?: string
    clientId: string
    equipmentTypeId: string
    quantity: number
    requestedStartDate: Date | string
    status?: string
    createdAt?: Date | string
  }

  export type WaitingListUpdateInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentType?: EquipmentTypeUpdateOneRequiredWithoutWaitingListItemsNestedInput
  }

  export type WaitingListUncheckedUpdateInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    equipmentTypeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaitingListCreateManyInput = {
    requestId?: string
    clientId: string
    equipmentTypeId: string
    quantity: number
    requestedStartDate: Date | string
    status?: string
    createdAt?: Date | string
  }

  export type WaitingListUpdateManyMutationInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaitingListUncheckedUpdateManyInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    equipmentTypeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RawEventLogCreateInput = {
    id?: string
    timestamp?: Date | string
    equipmentId: string
    eventType: $Enums.EventType
    value: JsonNullValueInput | InputJsonValue
    isProcessed?: boolean
  }

  export type RawEventLogUncheckedCreateInput = {
    id?: string
    timestamp?: Date | string
    equipmentId: string
    eventType: $Enums.EventType
    value: JsonNullValueInput | InputJsonValue
    isProcessed?: boolean
  }

  export type RawEventLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    value?: JsonNullValueInput | InputJsonValue
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RawEventLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    value?: JsonNullValueInput | InputJsonValue
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RawEventLogCreateManyInput = {
    id?: string
    timestamp?: Date | string
    equipmentId: string
    eventType: $Enums.EventType
    value: JsonNullValueInput | InputJsonValue
    isProcessed?: boolean
  }

  export type RawEventLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    value?: JsonNullValueInput | InputJsonValue
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RawEventLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    value?: JsonNullValueInput | InputJsonValue
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DailyUsageSummaryCreateInput = {
    id?: string
    date: Date | string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    equipment: EquipmentCreateNestedOneWithoutDailyUsageSummaryInput
    Client?: ClientCreateNestedOneWithoutDailySummariesInput
  }

  export type DailyUsageSummaryUncheckedCreateInput = {
    id?: string
    date: Date | string
    equipmentId: string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    clientClientId?: string | null
  }

  export type DailyUsageSummaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    equipment?: EquipmentUpdateOneRequiredWithoutDailyUsageSummaryNestedInput
    Client?: ClientUpdateOneWithoutDailySummariesNestedInput
  }

  export type DailyUsageSummaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    clientClientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DailyUsageSummaryCreateManyInput = {
    id?: string
    date: Date | string
    equipmentId: string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    clientClientId?: string | null
  }

  export type DailyUsageSummaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
  }

  export type DailyUsageSummaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    clientClientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type DailyUsageSummaryListRelationFilter = {
    every?: DailyUsageSummaryWhereInput
    some?: DailyUsageSummaryWhereInput
    none?: DailyUsageSummaryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyUsageSummaryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    clientId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    clientId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    clientId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EquipmentListRelationFilter = {
    every?: EquipmentWhereInput
    some?: EquipmentWhereInput
    none?: EquipmentWhereInput
  }

  export type WaitingListListRelationFilter = {
    every?: WaitingListWhereInput
    some?: WaitingListWhereInput
    none?: WaitingListWhereInput
  }

  export type EquipmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WaitingListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipmentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EquipmentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EquipmentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EquipmentTypeScalarRelationFilter = {
    is?: EquipmentTypeWhereInput
    isNot?: EquipmentTypeWhereInput
  }

  export type LineItemListRelationFilter = {
    every?: LineItemWhereInput
    some?: LineItemWhereInput
    none?: LineItemWhereInput
  }

  export type LineItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipmentCountOrderByAggregateInput = {
    equipmentId?: SortOrder
    status?: SortOrder
    equipmentTypeId?: SortOrder
  }

  export type EquipmentMaxOrderByAggregateInput = {
    equipmentId?: SortOrder
    status?: SortOrder
    equipmentTypeId?: SortOrder
  }

  export type EquipmentMinOrderByAggregateInput = {
    equipmentId?: SortOrder
    status?: SortOrder
    equipmentTypeId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type ContractCountOrderByAggregateInput = {
    contractId?: SortOrder
    siteId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    clientId?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    contractId?: SortOrder
    siteId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    clientId?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    contractId?: SortOrder
    siteId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    clientId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ContractScalarRelationFilter = {
    is?: ContractWhereInput
    isNot?: ContractWhereInput
  }

  export type EquipmentScalarRelationFilter = {
    is?: EquipmentWhereInput
    isNot?: EquipmentWhereInput
  }

  export type OperatorNullableScalarRelationFilter = {
    is?: OperatorWhereInput | null
    isNot?: OperatorWhereInput | null
  }

  export type LineItemCountOrderByAggregateInput = {
    lineItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalEngineHours?: SortOrder
    fuelUsage?: SortOrder
    downtimeHours?: SortOrder
    operatingDays?: SortOrder
    contractId?: SortOrder
    equipmentId?: SortOrder
    lastOperatorId?: SortOrder
  }

  export type LineItemAvgOrderByAggregateInput = {
    totalEngineHours?: SortOrder
    fuelUsage?: SortOrder
    downtimeHours?: SortOrder
    operatingDays?: SortOrder
  }

  export type LineItemMaxOrderByAggregateInput = {
    lineItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalEngineHours?: SortOrder
    fuelUsage?: SortOrder
    downtimeHours?: SortOrder
    operatingDays?: SortOrder
    contractId?: SortOrder
    equipmentId?: SortOrder
    lastOperatorId?: SortOrder
  }

  export type LineItemMinOrderByAggregateInput = {
    lineItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalEngineHours?: SortOrder
    fuelUsage?: SortOrder
    downtimeHours?: SortOrder
    operatingDays?: SortOrder
    contractId?: SortOrder
    equipmentId?: SortOrder
    lastOperatorId?: SortOrder
  }

  export type LineItemSumOrderByAggregateInput = {
    totalEngineHours?: SortOrder
    fuelUsage?: SortOrder
    downtimeHours?: SortOrder
    operatingDays?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type OperatorCountOrderByAggregateInput = {
    operatorId?: SortOrder
    name?: SortOrder
  }

  export type OperatorMaxOrderByAggregateInput = {
    operatorId?: SortOrder
    name?: SortOrder
  }

  export type OperatorMinOrderByAggregateInput = {
    operatorId?: SortOrder
    name?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type WaitingListCountOrderByAggregateInput = {
    requestId?: SortOrder
    clientId?: SortOrder
    equipmentTypeId?: SortOrder
    quantity?: SortOrder
    requestedStartDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type WaitingListAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type WaitingListMaxOrderByAggregateInput = {
    requestId?: SortOrder
    clientId?: SortOrder
    equipmentTypeId?: SortOrder
    quantity?: SortOrder
    requestedStartDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type WaitingListMinOrderByAggregateInput = {
    requestId?: SortOrder
    clientId?: SortOrder
    equipmentTypeId?: SortOrder
    quantity?: SortOrder
    requestedStartDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type WaitingListSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RawEventLogCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    equipmentId?: SortOrder
    eventType?: SortOrder
    value?: SortOrder
    isProcessed?: SortOrder
  }

  export type RawEventLogMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    equipmentId?: SortOrder
    eventType?: SortOrder
    isProcessed?: SortOrder
  }

  export type RawEventLogMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    equipmentId?: SortOrder
    eventType?: SortOrder
    isProcessed?: SortOrder
  }

  export type EnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ClientNullableScalarRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type DailyUsageSummaryEquipmentIdDateCompoundUniqueInput = {
    equipmentId: string
    date: Date | string
  }

  export type DailyUsageSummaryCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    equipmentId?: SortOrder
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
    clientClientId?: SortOrder
  }

  export type DailyUsageSummaryAvgOrderByAggregateInput = {
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
  }

  export type DailyUsageSummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    equipmentId?: SortOrder
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
    clientClientId?: SortOrder
  }

  export type DailyUsageSummaryMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    equipmentId?: SortOrder
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
    clientClientId?: SortOrder
  }

  export type DailyUsageSummarySumOrderByAggregateInput = {
    totalEngineHours?: SortOrder
    totalIdleHours?: SortOrder
    workingHours?: SortOrder
    fuelConsumed?: SortOrder
    distanceTraveled?: SortOrder
    highEngineTempAlerts?: SortOrder
    suddenFuelDrops?: SortOrder
    diagnosticErrors?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ContractCreateNestedManyWithoutClientInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DailyUsageSummaryCreateNestedManyWithoutClientInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutClientInput, DailyUsageSummaryUncheckedCreateWithoutClientInput> | DailyUsageSummaryCreateWithoutClientInput[] | DailyUsageSummaryUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutClientInput | DailyUsageSummaryCreateOrConnectWithoutClientInput[]
    createMany?: DailyUsageSummaryCreateManyClientInputEnvelope
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DailyUsageSummaryUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutClientInput, DailyUsageSummaryUncheckedCreateWithoutClientInput> | DailyUsageSummaryCreateWithoutClientInput[] | DailyUsageSummaryUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutClientInput | DailyUsageSummaryCreateOrConnectWithoutClientInput[]
    createMany?: DailyUsageSummaryCreateManyClientInputEnvelope
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ContractUpdateManyWithoutClientNestedInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutClientInput | ContractUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutClientInput | ContractUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutClientInput | ContractUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DailyUsageSummaryUpdateManyWithoutClientNestedInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutClientInput, DailyUsageSummaryUncheckedCreateWithoutClientInput> | DailyUsageSummaryCreateWithoutClientInput[] | DailyUsageSummaryUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutClientInput | DailyUsageSummaryCreateOrConnectWithoutClientInput[]
    upsert?: DailyUsageSummaryUpsertWithWhereUniqueWithoutClientInput | DailyUsageSummaryUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: DailyUsageSummaryCreateManyClientInputEnvelope
    set?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    disconnect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    delete?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    update?: DailyUsageSummaryUpdateWithWhereUniqueWithoutClientInput | DailyUsageSummaryUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: DailyUsageSummaryUpdateManyWithWhereWithoutClientInput | DailyUsageSummaryUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: DailyUsageSummaryScalarWhereInput | DailyUsageSummaryScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutClientInput | ContractUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutClientInput | ContractUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutClientInput | ContractUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DailyUsageSummaryUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutClientInput, DailyUsageSummaryUncheckedCreateWithoutClientInput> | DailyUsageSummaryCreateWithoutClientInput[] | DailyUsageSummaryUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutClientInput | DailyUsageSummaryCreateOrConnectWithoutClientInput[]
    upsert?: DailyUsageSummaryUpsertWithWhereUniqueWithoutClientInput | DailyUsageSummaryUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: DailyUsageSummaryCreateManyClientInputEnvelope
    set?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    disconnect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    delete?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    update?: DailyUsageSummaryUpdateWithWhereUniqueWithoutClientInput | DailyUsageSummaryUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: DailyUsageSummaryUpdateManyWithWhereWithoutClientInput | DailyUsageSummaryUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: DailyUsageSummaryScalarWhereInput | DailyUsageSummaryScalarWhereInput[]
  }

  export type EquipmentCreateNestedManyWithoutEquipmentTypeInput = {
    create?: XOR<EquipmentCreateWithoutEquipmentTypeInput, EquipmentUncheckedCreateWithoutEquipmentTypeInput> | EquipmentCreateWithoutEquipmentTypeInput[] | EquipmentUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutEquipmentTypeInput | EquipmentCreateOrConnectWithoutEquipmentTypeInput[]
    createMany?: EquipmentCreateManyEquipmentTypeInputEnvelope
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
  }

  export type WaitingListCreateNestedManyWithoutEquipmentTypeInput = {
    create?: XOR<WaitingListCreateWithoutEquipmentTypeInput, WaitingListUncheckedCreateWithoutEquipmentTypeInput> | WaitingListCreateWithoutEquipmentTypeInput[] | WaitingListUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: WaitingListCreateOrConnectWithoutEquipmentTypeInput | WaitingListCreateOrConnectWithoutEquipmentTypeInput[]
    createMany?: WaitingListCreateManyEquipmentTypeInputEnvelope
    connect?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
  }

  export type EquipmentUncheckedCreateNestedManyWithoutEquipmentTypeInput = {
    create?: XOR<EquipmentCreateWithoutEquipmentTypeInput, EquipmentUncheckedCreateWithoutEquipmentTypeInput> | EquipmentCreateWithoutEquipmentTypeInput[] | EquipmentUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutEquipmentTypeInput | EquipmentCreateOrConnectWithoutEquipmentTypeInput[]
    createMany?: EquipmentCreateManyEquipmentTypeInputEnvelope
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
  }

  export type WaitingListUncheckedCreateNestedManyWithoutEquipmentTypeInput = {
    create?: XOR<WaitingListCreateWithoutEquipmentTypeInput, WaitingListUncheckedCreateWithoutEquipmentTypeInput> | WaitingListCreateWithoutEquipmentTypeInput[] | WaitingListUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: WaitingListCreateOrConnectWithoutEquipmentTypeInput | WaitingListCreateOrConnectWithoutEquipmentTypeInput[]
    createMany?: WaitingListCreateManyEquipmentTypeInputEnvelope
    connect?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
  }

  export type EquipmentUpdateManyWithoutEquipmentTypeNestedInput = {
    create?: XOR<EquipmentCreateWithoutEquipmentTypeInput, EquipmentUncheckedCreateWithoutEquipmentTypeInput> | EquipmentCreateWithoutEquipmentTypeInput[] | EquipmentUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutEquipmentTypeInput | EquipmentCreateOrConnectWithoutEquipmentTypeInput[]
    upsert?: EquipmentUpsertWithWhereUniqueWithoutEquipmentTypeInput | EquipmentUpsertWithWhereUniqueWithoutEquipmentTypeInput[]
    createMany?: EquipmentCreateManyEquipmentTypeInputEnvelope
    set?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    disconnect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    delete?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    update?: EquipmentUpdateWithWhereUniqueWithoutEquipmentTypeInput | EquipmentUpdateWithWhereUniqueWithoutEquipmentTypeInput[]
    updateMany?: EquipmentUpdateManyWithWhereWithoutEquipmentTypeInput | EquipmentUpdateManyWithWhereWithoutEquipmentTypeInput[]
    deleteMany?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
  }

  export type WaitingListUpdateManyWithoutEquipmentTypeNestedInput = {
    create?: XOR<WaitingListCreateWithoutEquipmentTypeInput, WaitingListUncheckedCreateWithoutEquipmentTypeInput> | WaitingListCreateWithoutEquipmentTypeInput[] | WaitingListUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: WaitingListCreateOrConnectWithoutEquipmentTypeInput | WaitingListCreateOrConnectWithoutEquipmentTypeInput[]
    upsert?: WaitingListUpsertWithWhereUniqueWithoutEquipmentTypeInput | WaitingListUpsertWithWhereUniqueWithoutEquipmentTypeInput[]
    createMany?: WaitingListCreateManyEquipmentTypeInputEnvelope
    set?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    disconnect?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    delete?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    connect?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    update?: WaitingListUpdateWithWhereUniqueWithoutEquipmentTypeInput | WaitingListUpdateWithWhereUniqueWithoutEquipmentTypeInput[]
    updateMany?: WaitingListUpdateManyWithWhereWithoutEquipmentTypeInput | WaitingListUpdateManyWithWhereWithoutEquipmentTypeInput[]
    deleteMany?: WaitingListScalarWhereInput | WaitingListScalarWhereInput[]
  }

  export type EquipmentUncheckedUpdateManyWithoutEquipmentTypeNestedInput = {
    create?: XOR<EquipmentCreateWithoutEquipmentTypeInput, EquipmentUncheckedCreateWithoutEquipmentTypeInput> | EquipmentCreateWithoutEquipmentTypeInput[] | EquipmentUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: EquipmentCreateOrConnectWithoutEquipmentTypeInput | EquipmentCreateOrConnectWithoutEquipmentTypeInput[]
    upsert?: EquipmentUpsertWithWhereUniqueWithoutEquipmentTypeInput | EquipmentUpsertWithWhereUniqueWithoutEquipmentTypeInput[]
    createMany?: EquipmentCreateManyEquipmentTypeInputEnvelope
    set?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    disconnect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    delete?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    connect?: EquipmentWhereUniqueInput | EquipmentWhereUniqueInput[]
    update?: EquipmentUpdateWithWhereUniqueWithoutEquipmentTypeInput | EquipmentUpdateWithWhereUniqueWithoutEquipmentTypeInput[]
    updateMany?: EquipmentUpdateManyWithWhereWithoutEquipmentTypeInput | EquipmentUpdateManyWithWhereWithoutEquipmentTypeInput[]
    deleteMany?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
  }

  export type WaitingListUncheckedUpdateManyWithoutEquipmentTypeNestedInput = {
    create?: XOR<WaitingListCreateWithoutEquipmentTypeInput, WaitingListUncheckedCreateWithoutEquipmentTypeInput> | WaitingListCreateWithoutEquipmentTypeInput[] | WaitingListUncheckedCreateWithoutEquipmentTypeInput[]
    connectOrCreate?: WaitingListCreateOrConnectWithoutEquipmentTypeInput | WaitingListCreateOrConnectWithoutEquipmentTypeInput[]
    upsert?: WaitingListUpsertWithWhereUniqueWithoutEquipmentTypeInput | WaitingListUpsertWithWhereUniqueWithoutEquipmentTypeInput[]
    createMany?: WaitingListCreateManyEquipmentTypeInputEnvelope
    set?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    disconnect?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    delete?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    connect?: WaitingListWhereUniqueInput | WaitingListWhereUniqueInput[]
    update?: WaitingListUpdateWithWhereUniqueWithoutEquipmentTypeInput | WaitingListUpdateWithWhereUniqueWithoutEquipmentTypeInput[]
    updateMany?: WaitingListUpdateManyWithWhereWithoutEquipmentTypeInput | WaitingListUpdateManyWithWhereWithoutEquipmentTypeInput[]
    deleteMany?: WaitingListScalarWhereInput | WaitingListScalarWhereInput[]
  }

  export type EquipmentTypeCreateNestedOneWithoutEquipmentInput = {
    create?: XOR<EquipmentTypeCreateWithoutEquipmentInput, EquipmentTypeUncheckedCreateWithoutEquipmentInput>
    connectOrCreate?: EquipmentTypeCreateOrConnectWithoutEquipmentInput
    connect?: EquipmentTypeWhereUniqueInput
  }

  export type LineItemCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<LineItemCreateWithoutEquipmentInput, LineItemUncheckedCreateWithoutEquipmentInput> | LineItemCreateWithoutEquipmentInput[] | LineItemUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutEquipmentInput | LineItemCreateOrConnectWithoutEquipmentInput[]
    createMany?: LineItemCreateManyEquipmentInputEnvelope
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
  }

  export type DailyUsageSummaryCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutEquipmentInput, DailyUsageSummaryUncheckedCreateWithoutEquipmentInput> | DailyUsageSummaryCreateWithoutEquipmentInput[] | DailyUsageSummaryUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutEquipmentInput | DailyUsageSummaryCreateOrConnectWithoutEquipmentInput[]
    createMany?: DailyUsageSummaryCreateManyEquipmentInputEnvelope
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
  }

  export type LineItemUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<LineItemCreateWithoutEquipmentInput, LineItemUncheckedCreateWithoutEquipmentInput> | LineItemCreateWithoutEquipmentInput[] | LineItemUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutEquipmentInput | LineItemCreateOrConnectWithoutEquipmentInput[]
    createMany?: LineItemCreateManyEquipmentInputEnvelope
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
  }

  export type DailyUsageSummaryUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutEquipmentInput, DailyUsageSummaryUncheckedCreateWithoutEquipmentInput> | DailyUsageSummaryCreateWithoutEquipmentInput[] | DailyUsageSummaryUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutEquipmentInput | DailyUsageSummaryCreateOrConnectWithoutEquipmentInput[]
    createMany?: DailyUsageSummaryCreateManyEquipmentInputEnvelope
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
  }

  export type EquipmentTypeUpdateOneRequiredWithoutEquipmentNestedInput = {
    create?: XOR<EquipmentTypeCreateWithoutEquipmentInput, EquipmentTypeUncheckedCreateWithoutEquipmentInput>
    connectOrCreate?: EquipmentTypeCreateOrConnectWithoutEquipmentInput
    upsert?: EquipmentTypeUpsertWithoutEquipmentInput
    connect?: EquipmentTypeWhereUniqueInput
    update?: XOR<XOR<EquipmentTypeUpdateToOneWithWhereWithoutEquipmentInput, EquipmentTypeUpdateWithoutEquipmentInput>, EquipmentTypeUncheckedUpdateWithoutEquipmentInput>
  }

  export type LineItemUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<LineItemCreateWithoutEquipmentInput, LineItemUncheckedCreateWithoutEquipmentInput> | LineItemCreateWithoutEquipmentInput[] | LineItemUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutEquipmentInput | LineItemCreateOrConnectWithoutEquipmentInput[]
    upsert?: LineItemUpsertWithWhereUniqueWithoutEquipmentInput | LineItemUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: LineItemCreateManyEquipmentInputEnvelope
    set?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    disconnect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    delete?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    update?: LineItemUpdateWithWhereUniqueWithoutEquipmentInput | LineItemUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: LineItemUpdateManyWithWhereWithoutEquipmentInput | LineItemUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
  }

  export type DailyUsageSummaryUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutEquipmentInput, DailyUsageSummaryUncheckedCreateWithoutEquipmentInput> | DailyUsageSummaryCreateWithoutEquipmentInput[] | DailyUsageSummaryUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutEquipmentInput | DailyUsageSummaryCreateOrConnectWithoutEquipmentInput[]
    upsert?: DailyUsageSummaryUpsertWithWhereUniqueWithoutEquipmentInput | DailyUsageSummaryUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: DailyUsageSummaryCreateManyEquipmentInputEnvelope
    set?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    disconnect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    delete?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    update?: DailyUsageSummaryUpdateWithWhereUniqueWithoutEquipmentInput | DailyUsageSummaryUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: DailyUsageSummaryUpdateManyWithWhereWithoutEquipmentInput | DailyUsageSummaryUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: DailyUsageSummaryScalarWhereInput | DailyUsageSummaryScalarWhereInput[]
  }

  export type LineItemUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<LineItemCreateWithoutEquipmentInput, LineItemUncheckedCreateWithoutEquipmentInput> | LineItemCreateWithoutEquipmentInput[] | LineItemUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutEquipmentInput | LineItemCreateOrConnectWithoutEquipmentInput[]
    upsert?: LineItemUpsertWithWhereUniqueWithoutEquipmentInput | LineItemUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: LineItemCreateManyEquipmentInputEnvelope
    set?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    disconnect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    delete?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    update?: LineItemUpdateWithWhereUniqueWithoutEquipmentInput | LineItemUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: LineItemUpdateManyWithWhereWithoutEquipmentInput | LineItemUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
  }

  export type DailyUsageSummaryUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<DailyUsageSummaryCreateWithoutEquipmentInput, DailyUsageSummaryUncheckedCreateWithoutEquipmentInput> | DailyUsageSummaryCreateWithoutEquipmentInput[] | DailyUsageSummaryUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: DailyUsageSummaryCreateOrConnectWithoutEquipmentInput | DailyUsageSummaryCreateOrConnectWithoutEquipmentInput[]
    upsert?: DailyUsageSummaryUpsertWithWhereUniqueWithoutEquipmentInput | DailyUsageSummaryUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: DailyUsageSummaryCreateManyEquipmentInputEnvelope
    set?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    disconnect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    delete?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    connect?: DailyUsageSummaryWhereUniqueInput | DailyUsageSummaryWhereUniqueInput[]
    update?: DailyUsageSummaryUpdateWithWhereUniqueWithoutEquipmentInput | DailyUsageSummaryUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: DailyUsageSummaryUpdateManyWithWhereWithoutEquipmentInput | DailyUsageSummaryUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: DailyUsageSummaryScalarWhereInput | DailyUsageSummaryScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutContractsInput = {
    create?: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutContractsInput
    connect?: ClientWhereUniqueInput
  }

  export type LineItemCreateNestedManyWithoutContractInput = {
    create?: XOR<LineItemCreateWithoutContractInput, LineItemUncheckedCreateWithoutContractInput> | LineItemCreateWithoutContractInput[] | LineItemUncheckedCreateWithoutContractInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutContractInput | LineItemCreateOrConnectWithoutContractInput[]
    createMany?: LineItemCreateManyContractInputEnvelope
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
  }

  export type LineItemUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<LineItemCreateWithoutContractInput, LineItemUncheckedCreateWithoutContractInput> | LineItemCreateWithoutContractInput[] | LineItemUncheckedCreateWithoutContractInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutContractInput | LineItemCreateOrConnectWithoutContractInput[]
    createMany?: LineItemCreateManyContractInputEnvelope
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ClientUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutContractsInput
    upsert?: ClientUpsertWithoutContractsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutContractsInput, ClientUpdateWithoutContractsInput>, ClientUncheckedUpdateWithoutContractsInput>
  }

  export type LineItemUpdateManyWithoutContractNestedInput = {
    create?: XOR<LineItemCreateWithoutContractInput, LineItemUncheckedCreateWithoutContractInput> | LineItemCreateWithoutContractInput[] | LineItemUncheckedCreateWithoutContractInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutContractInput | LineItemCreateOrConnectWithoutContractInput[]
    upsert?: LineItemUpsertWithWhereUniqueWithoutContractInput | LineItemUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: LineItemCreateManyContractInputEnvelope
    set?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    disconnect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    delete?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    update?: LineItemUpdateWithWhereUniqueWithoutContractInput | LineItemUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: LineItemUpdateManyWithWhereWithoutContractInput | LineItemUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
  }

  export type LineItemUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<LineItemCreateWithoutContractInput, LineItemUncheckedCreateWithoutContractInput> | LineItemCreateWithoutContractInput[] | LineItemUncheckedCreateWithoutContractInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutContractInput | LineItemCreateOrConnectWithoutContractInput[]
    upsert?: LineItemUpsertWithWhereUniqueWithoutContractInput | LineItemUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: LineItemCreateManyContractInputEnvelope
    set?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    disconnect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    delete?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    update?: LineItemUpdateWithWhereUniqueWithoutContractInput | LineItemUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: LineItemUpdateManyWithWhereWithoutContractInput | LineItemUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
  }

  export type ContractCreateNestedOneWithoutLineItemsInput = {
    create?: XOR<ContractCreateWithoutLineItemsInput, ContractUncheckedCreateWithoutLineItemsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutLineItemsInput
    connect?: ContractWhereUniqueInput
  }

  export type EquipmentCreateNestedOneWithoutLineItemsInput = {
    create?: XOR<EquipmentCreateWithoutLineItemsInput, EquipmentUncheckedCreateWithoutLineItemsInput>
    connectOrCreate?: EquipmentCreateOrConnectWithoutLineItemsInput
    connect?: EquipmentWhereUniqueInput
  }

  export type OperatorCreateNestedOneWithoutLineItemsInput = {
    create?: XOR<OperatorCreateWithoutLineItemsInput, OperatorUncheckedCreateWithoutLineItemsInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutLineItemsInput
    connect?: OperatorWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContractUpdateOneRequiredWithoutLineItemsNestedInput = {
    create?: XOR<ContractCreateWithoutLineItemsInput, ContractUncheckedCreateWithoutLineItemsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutLineItemsInput
    upsert?: ContractUpsertWithoutLineItemsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutLineItemsInput, ContractUpdateWithoutLineItemsInput>, ContractUncheckedUpdateWithoutLineItemsInput>
  }

  export type EquipmentUpdateOneRequiredWithoutLineItemsNestedInput = {
    create?: XOR<EquipmentCreateWithoutLineItemsInput, EquipmentUncheckedCreateWithoutLineItemsInput>
    connectOrCreate?: EquipmentCreateOrConnectWithoutLineItemsInput
    upsert?: EquipmentUpsertWithoutLineItemsInput
    connect?: EquipmentWhereUniqueInput
    update?: XOR<XOR<EquipmentUpdateToOneWithWhereWithoutLineItemsInput, EquipmentUpdateWithoutLineItemsInput>, EquipmentUncheckedUpdateWithoutLineItemsInput>
  }

  export type OperatorUpdateOneWithoutLineItemsNestedInput = {
    create?: XOR<OperatorCreateWithoutLineItemsInput, OperatorUncheckedCreateWithoutLineItemsInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutLineItemsInput
    upsert?: OperatorUpsertWithoutLineItemsInput
    disconnect?: OperatorWhereInput | boolean
    delete?: OperatorWhereInput | boolean
    connect?: OperatorWhereUniqueInput
    update?: XOR<XOR<OperatorUpdateToOneWithWhereWithoutLineItemsInput, OperatorUpdateWithoutLineItemsInput>, OperatorUncheckedUpdateWithoutLineItemsInput>
  }

  export type LineItemCreateNestedManyWithoutOperatorInput = {
    create?: XOR<LineItemCreateWithoutOperatorInput, LineItemUncheckedCreateWithoutOperatorInput> | LineItemCreateWithoutOperatorInput[] | LineItemUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutOperatorInput | LineItemCreateOrConnectWithoutOperatorInput[]
    createMany?: LineItemCreateManyOperatorInputEnvelope
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
  }

  export type LineItemUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<LineItemCreateWithoutOperatorInput, LineItemUncheckedCreateWithoutOperatorInput> | LineItemCreateWithoutOperatorInput[] | LineItemUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutOperatorInput | LineItemCreateOrConnectWithoutOperatorInput[]
    createMany?: LineItemCreateManyOperatorInputEnvelope
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
  }

  export type LineItemUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<LineItemCreateWithoutOperatorInput, LineItemUncheckedCreateWithoutOperatorInput> | LineItemCreateWithoutOperatorInput[] | LineItemUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutOperatorInput | LineItemCreateOrConnectWithoutOperatorInput[]
    upsert?: LineItemUpsertWithWhereUniqueWithoutOperatorInput | LineItemUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: LineItemCreateManyOperatorInputEnvelope
    set?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    disconnect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    delete?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    update?: LineItemUpdateWithWhereUniqueWithoutOperatorInput | LineItemUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: LineItemUpdateManyWithWhereWithoutOperatorInput | LineItemUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
  }

  export type LineItemUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<LineItemCreateWithoutOperatorInput, LineItemUncheckedCreateWithoutOperatorInput> | LineItemCreateWithoutOperatorInput[] | LineItemUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: LineItemCreateOrConnectWithoutOperatorInput | LineItemCreateOrConnectWithoutOperatorInput[]
    upsert?: LineItemUpsertWithWhereUniqueWithoutOperatorInput | LineItemUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: LineItemCreateManyOperatorInputEnvelope
    set?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    disconnect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    delete?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    connect?: LineItemWhereUniqueInput | LineItemWhereUniqueInput[]
    update?: LineItemUpdateWithWhereUniqueWithoutOperatorInput | LineItemUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: LineItemUpdateManyWithWhereWithoutOperatorInput | LineItemUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
  }

  export type EquipmentTypeCreateNestedOneWithoutWaitingListItemsInput = {
    create?: XOR<EquipmentTypeCreateWithoutWaitingListItemsInput, EquipmentTypeUncheckedCreateWithoutWaitingListItemsInput>
    connectOrCreate?: EquipmentTypeCreateOrConnectWithoutWaitingListItemsInput
    connect?: EquipmentTypeWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EquipmentTypeUpdateOneRequiredWithoutWaitingListItemsNestedInput = {
    create?: XOR<EquipmentTypeCreateWithoutWaitingListItemsInput, EquipmentTypeUncheckedCreateWithoutWaitingListItemsInput>
    connectOrCreate?: EquipmentTypeCreateOrConnectWithoutWaitingListItemsInput
    upsert?: EquipmentTypeUpsertWithoutWaitingListItemsInput
    connect?: EquipmentTypeWhereUniqueInput
    update?: XOR<XOR<EquipmentTypeUpdateToOneWithWhereWithoutWaitingListItemsInput, EquipmentTypeUpdateWithoutWaitingListItemsInput>, EquipmentTypeUncheckedUpdateWithoutWaitingListItemsInput>
  }

  export type EnumEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.EventType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EquipmentCreateNestedOneWithoutDailyUsageSummaryInput = {
    create?: XOR<EquipmentCreateWithoutDailyUsageSummaryInput, EquipmentUncheckedCreateWithoutDailyUsageSummaryInput>
    connectOrCreate?: EquipmentCreateOrConnectWithoutDailyUsageSummaryInput
    connect?: EquipmentWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutDailySummariesInput = {
    create?: XOR<ClientCreateWithoutDailySummariesInput, ClientUncheckedCreateWithoutDailySummariesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDailySummariesInput
    connect?: ClientWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EquipmentUpdateOneRequiredWithoutDailyUsageSummaryNestedInput = {
    create?: XOR<EquipmentCreateWithoutDailyUsageSummaryInput, EquipmentUncheckedCreateWithoutDailyUsageSummaryInput>
    connectOrCreate?: EquipmentCreateOrConnectWithoutDailyUsageSummaryInput
    upsert?: EquipmentUpsertWithoutDailyUsageSummaryInput
    connect?: EquipmentWhereUniqueInput
    update?: XOR<XOR<EquipmentUpdateToOneWithWhereWithoutDailyUsageSummaryInput, EquipmentUpdateWithoutDailyUsageSummaryInput>, EquipmentUncheckedUpdateWithoutDailyUsageSummaryInput>
  }

  export type ClientUpdateOneWithoutDailySummariesNestedInput = {
    create?: XOR<ClientCreateWithoutDailySummariesInput, ClientUncheckedCreateWithoutDailySummariesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDailySummariesInput
    upsert?: ClientUpsertWithoutDailySummariesInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutDailySummariesInput, ClientUpdateWithoutDailySummariesInput>, ClientUncheckedUpdateWithoutDailySummariesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ContractCreateWithoutClientInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    lineItems?: LineItemCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutClientInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    lineItems?: LineItemUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutClientInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput>
  }

  export type ContractCreateManyClientInputEnvelope = {
    data: ContractCreateManyClientInput | ContractCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type DailyUsageSummaryCreateWithoutClientInput = {
    id?: string
    date: Date | string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    equipment: EquipmentCreateNestedOneWithoutDailyUsageSummaryInput
  }

  export type DailyUsageSummaryUncheckedCreateWithoutClientInput = {
    id?: string
    date: Date | string
    equipmentId: string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
  }

  export type DailyUsageSummaryCreateOrConnectWithoutClientInput = {
    where: DailyUsageSummaryWhereUniqueInput
    create: XOR<DailyUsageSummaryCreateWithoutClientInput, DailyUsageSummaryUncheckedCreateWithoutClientInput>
  }

  export type DailyUsageSummaryCreateManyClientInputEnvelope = {
    data: DailyUsageSummaryCreateManyClientInput | DailyUsageSummaryCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutClientInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutClientInput, ContractUncheckedUpdateWithoutClientInput>
    create: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutClientInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutClientInput, ContractUncheckedUpdateWithoutClientInput>
  }

  export type ContractUpdateManyWithWhereWithoutClientInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutClientInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    contractId?: StringFilter<"Contract"> | string
    siteId?: StringFilter<"Contract"> | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    clientId?: StringFilter<"Contract"> | string
  }

  export type DailyUsageSummaryUpsertWithWhereUniqueWithoutClientInput = {
    where: DailyUsageSummaryWhereUniqueInput
    update: XOR<DailyUsageSummaryUpdateWithoutClientInput, DailyUsageSummaryUncheckedUpdateWithoutClientInput>
    create: XOR<DailyUsageSummaryCreateWithoutClientInput, DailyUsageSummaryUncheckedCreateWithoutClientInput>
  }

  export type DailyUsageSummaryUpdateWithWhereUniqueWithoutClientInput = {
    where: DailyUsageSummaryWhereUniqueInput
    data: XOR<DailyUsageSummaryUpdateWithoutClientInput, DailyUsageSummaryUncheckedUpdateWithoutClientInput>
  }

  export type DailyUsageSummaryUpdateManyWithWhereWithoutClientInput = {
    where: DailyUsageSummaryScalarWhereInput
    data: XOR<DailyUsageSummaryUpdateManyMutationInput, DailyUsageSummaryUncheckedUpdateManyWithoutClientInput>
  }

  export type DailyUsageSummaryScalarWhereInput = {
    AND?: DailyUsageSummaryScalarWhereInput | DailyUsageSummaryScalarWhereInput[]
    OR?: DailyUsageSummaryScalarWhereInput[]
    NOT?: DailyUsageSummaryScalarWhereInput | DailyUsageSummaryScalarWhereInput[]
    id?: StringFilter<"DailyUsageSummary"> | string
    date?: DateTimeFilter<"DailyUsageSummary"> | Date | string
    equipmentId?: StringFilter<"DailyUsageSummary"> | string
    totalEngineHours?: FloatFilter<"DailyUsageSummary"> | number
    totalIdleHours?: FloatFilter<"DailyUsageSummary"> | number
    workingHours?: FloatFilter<"DailyUsageSummary"> | number
    fuelConsumed?: FloatFilter<"DailyUsageSummary"> | number
    distanceTraveled?: FloatNullableFilter<"DailyUsageSummary"> | number | null
    highEngineTempAlerts?: IntFilter<"DailyUsageSummary"> | number
    suddenFuelDrops?: IntFilter<"DailyUsageSummary"> | number
    diagnosticErrors?: IntFilter<"DailyUsageSummary"> | number
    clientClientId?: StringNullableFilter<"DailyUsageSummary"> | string | null
  }

  export type EquipmentCreateWithoutEquipmentTypeInput = {
    equipmentId?: string
    status?: string
    lineItems?: LineItemCreateNestedManyWithoutEquipmentInput
    DailyUsageSummary?: DailyUsageSummaryCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUncheckedCreateWithoutEquipmentTypeInput = {
    equipmentId?: string
    status?: string
    lineItems?: LineItemUncheckedCreateNestedManyWithoutEquipmentInput
    DailyUsageSummary?: DailyUsageSummaryUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentCreateOrConnectWithoutEquipmentTypeInput = {
    where: EquipmentWhereUniqueInput
    create: XOR<EquipmentCreateWithoutEquipmentTypeInput, EquipmentUncheckedCreateWithoutEquipmentTypeInput>
  }

  export type EquipmentCreateManyEquipmentTypeInputEnvelope = {
    data: EquipmentCreateManyEquipmentTypeInput | EquipmentCreateManyEquipmentTypeInput[]
    skipDuplicates?: boolean
  }

  export type WaitingListCreateWithoutEquipmentTypeInput = {
    requestId?: string
    clientId: string
    quantity: number
    requestedStartDate: Date | string
    status?: string
    createdAt?: Date | string
  }

  export type WaitingListUncheckedCreateWithoutEquipmentTypeInput = {
    requestId?: string
    clientId: string
    quantity: number
    requestedStartDate: Date | string
    status?: string
    createdAt?: Date | string
  }

  export type WaitingListCreateOrConnectWithoutEquipmentTypeInput = {
    where: WaitingListWhereUniqueInput
    create: XOR<WaitingListCreateWithoutEquipmentTypeInput, WaitingListUncheckedCreateWithoutEquipmentTypeInput>
  }

  export type WaitingListCreateManyEquipmentTypeInputEnvelope = {
    data: WaitingListCreateManyEquipmentTypeInput | WaitingListCreateManyEquipmentTypeInput[]
    skipDuplicates?: boolean
  }

  export type EquipmentUpsertWithWhereUniqueWithoutEquipmentTypeInput = {
    where: EquipmentWhereUniqueInput
    update: XOR<EquipmentUpdateWithoutEquipmentTypeInput, EquipmentUncheckedUpdateWithoutEquipmentTypeInput>
    create: XOR<EquipmentCreateWithoutEquipmentTypeInput, EquipmentUncheckedCreateWithoutEquipmentTypeInput>
  }

  export type EquipmentUpdateWithWhereUniqueWithoutEquipmentTypeInput = {
    where: EquipmentWhereUniqueInput
    data: XOR<EquipmentUpdateWithoutEquipmentTypeInput, EquipmentUncheckedUpdateWithoutEquipmentTypeInput>
  }

  export type EquipmentUpdateManyWithWhereWithoutEquipmentTypeInput = {
    where: EquipmentScalarWhereInput
    data: XOR<EquipmentUpdateManyMutationInput, EquipmentUncheckedUpdateManyWithoutEquipmentTypeInput>
  }

  export type EquipmentScalarWhereInput = {
    AND?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
    OR?: EquipmentScalarWhereInput[]
    NOT?: EquipmentScalarWhereInput | EquipmentScalarWhereInput[]
    equipmentId?: StringFilter<"Equipment"> | string
    status?: StringFilter<"Equipment"> | string
    equipmentTypeId?: StringFilter<"Equipment"> | string
  }

  export type WaitingListUpsertWithWhereUniqueWithoutEquipmentTypeInput = {
    where: WaitingListWhereUniqueInput
    update: XOR<WaitingListUpdateWithoutEquipmentTypeInput, WaitingListUncheckedUpdateWithoutEquipmentTypeInput>
    create: XOR<WaitingListCreateWithoutEquipmentTypeInput, WaitingListUncheckedCreateWithoutEquipmentTypeInput>
  }

  export type WaitingListUpdateWithWhereUniqueWithoutEquipmentTypeInput = {
    where: WaitingListWhereUniqueInput
    data: XOR<WaitingListUpdateWithoutEquipmentTypeInput, WaitingListUncheckedUpdateWithoutEquipmentTypeInput>
  }

  export type WaitingListUpdateManyWithWhereWithoutEquipmentTypeInput = {
    where: WaitingListScalarWhereInput
    data: XOR<WaitingListUpdateManyMutationInput, WaitingListUncheckedUpdateManyWithoutEquipmentTypeInput>
  }

  export type WaitingListScalarWhereInput = {
    AND?: WaitingListScalarWhereInput | WaitingListScalarWhereInput[]
    OR?: WaitingListScalarWhereInput[]
    NOT?: WaitingListScalarWhereInput | WaitingListScalarWhereInput[]
    requestId?: StringFilter<"WaitingList"> | string
    clientId?: StringFilter<"WaitingList"> | string
    equipmentTypeId?: StringFilter<"WaitingList"> | string
    quantity?: IntFilter<"WaitingList"> | number
    requestedStartDate?: DateTimeFilter<"WaitingList"> | Date | string
    status?: StringFilter<"WaitingList"> | string
    createdAt?: DateTimeFilter<"WaitingList"> | Date | string
  }

  export type EquipmentTypeCreateWithoutEquipmentInput = {
    id?: string
    name: string
    waitingListItems?: WaitingListCreateNestedManyWithoutEquipmentTypeInput
  }

  export type EquipmentTypeUncheckedCreateWithoutEquipmentInput = {
    id?: string
    name: string
    waitingListItems?: WaitingListUncheckedCreateNestedManyWithoutEquipmentTypeInput
  }

  export type EquipmentTypeCreateOrConnectWithoutEquipmentInput = {
    where: EquipmentTypeWhereUniqueInput
    create: XOR<EquipmentTypeCreateWithoutEquipmentInput, EquipmentTypeUncheckedCreateWithoutEquipmentInput>
  }

  export type LineItemCreateWithoutEquipmentInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contract: ContractCreateNestedOneWithoutLineItemsInput
    operator?: OperatorCreateNestedOneWithoutLineItemsInput
  }

  export type LineItemUncheckedCreateWithoutEquipmentInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contractId: string
    lastOperatorId?: string | null
  }

  export type LineItemCreateOrConnectWithoutEquipmentInput = {
    where: LineItemWhereUniqueInput
    create: XOR<LineItemCreateWithoutEquipmentInput, LineItemUncheckedCreateWithoutEquipmentInput>
  }

  export type LineItemCreateManyEquipmentInputEnvelope = {
    data: LineItemCreateManyEquipmentInput | LineItemCreateManyEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type DailyUsageSummaryCreateWithoutEquipmentInput = {
    id?: string
    date: Date | string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    Client?: ClientCreateNestedOneWithoutDailySummariesInput
  }

  export type DailyUsageSummaryUncheckedCreateWithoutEquipmentInput = {
    id?: string
    date: Date | string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    clientClientId?: string | null
  }

  export type DailyUsageSummaryCreateOrConnectWithoutEquipmentInput = {
    where: DailyUsageSummaryWhereUniqueInput
    create: XOR<DailyUsageSummaryCreateWithoutEquipmentInput, DailyUsageSummaryUncheckedCreateWithoutEquipmentInput>
  }

  export type DailyUsageSummaryCreateManyEquipmentInputEnvelope = {
    data: DailyUsageSummaryCreateManyEquipmentInput | DailyUsageSummaryCreateManyEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type EquipmentTypeUpsertWithoutEquipmentInput = {
    update: XOR<EquipmentTypeUpdateWithoutEquipmentInput, EquipmentTypeUncheckedUpdateWithoutEquipmentInput>
    create: XOR<EquipmentTypeCreateWithoutEquipmentInput, EquipmentTypeUncheckedCreateWithoutEquipmentInput>
    where?: EquipmentTypeWhereInput
  }

  export type EquipmentTypeUpdateToOneWithWhereWithoutEquipmentInput = {
    where?: EquipmentTypeWhereInput
    data: XOR<EquipmentTypeUpdateWithoutEquipmentInput, EquipmentTypeUncheckedUpdateWithoutEquipmentInput>
  }

  export type EquipmentTypeUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    waitingListItems?: WaitingListUpdateManyWithoutEquipmentTypeNestedInput
  }

  export type EquipmentTypeUncheckedUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    waitingListItems?: WaitingListUncheckedUpdateManyWithoutEquipmentTypeNestedInput
  }

  export type LineItemUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: LineItemWhereUniqueInput
    update: XOR<LineItemUpdateWithoutEquipmentInput, LineItemUncheckedUpdateWithoutEquipmentInput>
    create: XOR<LineItemCreateWithoutEquipmentInput, LineItemUncheckedCreateWithoutEquipmentInput>
  }

  export type LineItemUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: LineItemWhereUniqueInput
    data: XOR<LineItemUpdateWithoutEquipmentInput, LineItemUncheckedUpdateWithoutEquipmentInput>
  }

  export type LineItemUpdateManyWithWhereWithoutEquipmentInput = {
    where: LineItemScalarWhereInput
    data: XOR<LineItemUpdateManyMutationInput, LineItemUncheckedUpdateManyWithoutEquipmentInput>
  }

  export type LineItemScalarWhereInput = {
    AND?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
    OR?: LineItemScalarWhereInput[]
    NOT?: LineItemScalarWhereInput | LineItemScalarWhereInput[]
    lineItemId?: StringFilter<"LineItem"> | string
    startDate?: DateTimeFilter<"LineItem"> | Date | string
    endDate?: DateTimeFilter<"LineItem"> | Date | string
    totalEngineHours?: FloatNullableFilter<"LineItem"> | number | null
    fuelUsage?: FloatNullableFilter<"LineItem"> | number | null
    downtimeHours?: FloatNullableFilter<"LineItem"> | number | null
    operatingDays?: IntNullableFilter<"LineItem"> | number | null
    contractId?: StringFilter<"LineItem"> | string
    equipmentId?: StringFilter<"LineItem"> | string
    lastOperatorId?: StringNullableFilter<"LineItem"> | string | null
  }

  export type DailyUsageSummaryUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: DailyUsageSummaryWhereUniqueInput
    update: XOR<DailyUsageSummaryUpdateWithoutEquipmentInput, DailyUsageSummaryUncheckedUpdateWithoutEquipmentInput>
    create: XOR<DailyUsageSummaryCreateWithoutEquipmentInput, DailyUsageSummaryUncheckedCreateWithoutEquipmentInput>
  }

  export type DailyUsageSummaryUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: DailyUsageSummaryWhereUniqueInput
    data: XOR<DailyUsageSummaryUpdateWithoutEquipmentInput, DailyUsageSummaryUncheckedUpdateWithoutEquipmentInput>
  }

  export type DailyUsageSummaryUpdateManyWithWhereWithoutEquipmentInput = {
    where: DailyUsageSummaryScalarWhereInput
    data: XOR<DailyUsageSummaryUpdateManyMutationInput, DailyUsageSummaryUncheckedUpdateManyWithoutEquipmentInput>
  }

  export type ClientCreateWithoutContractsInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
    dailySummaries?: DailyUsageSummaryCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutContractsInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
    dailySummaries?: DailyUsageSummaryUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutContractsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
  }

  export type LineItemCreateWithoutContractInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    equipment: EquipmentCreateNestedOneWithoutLineItemsInput
    operator?: OperatorCreateNestedOneWithoutLineItemsInput
  }

  export type LineItemUncheckedCreateWithoutContractInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    equipmentId: string
    lastOperatorId?: string | null
  }

  export type LineItemCreateOrConnectWithoutContractInput = {
    where: LineItemWhereUniqueInput
    create: XOR<LineItemCreateWithoutContractInput, LineItemUncheckedCreateWithoutContractInput>
  }

  export type LineItemCreateManyContractInputEnvelope = {
    data: LineItemCreateManyContractInput | LineItemCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutContractsInput = {
    update: XOR<ClientUpdateWithoutContractsInput, ClientUncheckedUpdateWithoutContractsInput>
    create: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutContractsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutContractsInput, ClientUncheckedUpdateWithoutContractsInput>
  }

  export type ClientUpdateWithoutContractsInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dailySummaries?: DailyUsageSummaryUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutContractsInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dailySummaries?: DailyUsageSummaryUncheckedUpdateManyWithoutClientNestedInput
  }

  export type LineItemUpsertWithWhereUniqueWithoutContractInput = {
    where: LineItemWhereUniqueInput
    update: XOR<LineItemUpdateWithoutContractInput, LineItemUncheckedUpdateWithoutContractInput>
    create: XOR<LineItemCreateWithoutContractInput, LineItemUncheckedCreateWithoutContractInput>
  }

  export type LineItemUpdateWithWhereUniqueWithoutContractInput = {
    where: LineItemWhereUniqueInput
    data: XOR<LineItemUpdateWithoutContractInput, LineItemUncheckedUpdateWithoutContractInput>
  }

  export type LineItemUpdateManyWithWhereWithoutContractInput = {
    where: LineItemScalarWhereInput
    data: XOR<LineItemUpdateManyMutationInput, LineItemUncheckedUpdateManyWithoutContractInput>
  }

  export type ContractCreateWithoutLineItemsInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateWithoutLineItemsInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
    clientId: string
  }

  export type ContractCreateOrConnectWithoutLineItemsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutLineItemsInput, ContractUncheckedCreateWithoutLineItemsInput>
  }

  export type EquipmentCreateWithoutLineItemsInput = {
    equipmentId?: string
    status?: string
    equipmentType: EquipmentTypeCreateNestedOneWithoutEquipmentInput
    DailyUsageSummary?: DailyUsageSummaryCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUncheckedCreateWithoutLineItemsInput = {
    equipmentId?: string
    status?: string
    equipmentTypeId: string
    DailyUsageSummary?: DailyUsageSummaryUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentCreateOrConnectWithoutLineItemsInput = {
    where: EquipmentWhereUniqueInput
    create: XOR<EquipmentCreateWithoutLineItemsInput, EquipmentUncheckedCreateWithoutLineItemsInput>
  }

  export type OperatorCreateWithoutLineItemsInput = {
    operatorId?: string
    name: string
  }

  export type OperatorUncheckedCreateWithoutLineItemsInput = {
    operatorId?: string
    name: string
  }

  export type OperatorCreateOrConnectWithoutLineItemsInput = {
    where: OperatorWhereUniqueInput
    create: XOR<OperatorCreateWithoutLineItemsInput, OperatorUncheckedCreateWithoutLineItemsInput>
  }

  export type ContractUpsertWithoutLineItemsInput = {
    update: XOR<ContractUpdateWithoutLineItemsInput, ContractUncheckedUpdateWithoutLineItemsInput>
    create: XOR<ContractCreateWithoutLineItemsInput, ContractUncheckedCreateWithoutLineItemsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutLineItemsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutLineItemsInput, ContractUncheckedUpdateWithoutLineItemsInput>
  }

  export type ContractUpdateWithoutLineItemsInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutLineItemsInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type EquipmentUpsertWithoutLineItemsInput = {
    update: XOR<EquipmentUpdateWithoutLineItemsInput, EquipmentUncheckedUpdateWithoutLineItemsInput>
    create: XOR<EquipmentCreateWithoutLineItemsInput, EquipmentUncheckedCreateWithoutLineItemsInput>
    where?: EquipmentWhereInput
  }

  export type EquipmentUpdateToOneWithWhereWithoutLineItemsInput = {
    where?: EquipmentWhereInput
    data: XOR<EquipmentUpdateWithoutLineItemsInput, EquipmentUncheckedUpdateWithoutLineItemsInput>
  }

  export type EquipmentUpdateWithoutLineItemsInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentType?: EquipmentTypeUpdateOneRequiredWithoutEquipmentNestedInput
    DailyUsageSummary?: DailyUsageSummaryUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateWithoutLineItemsInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentTypeId?: StringFieldUpdateOperationsInput | string
    DailyUsageSummary?: DailyUsageSummaryUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type OperatorUpsertWithoutLineItemsInput = {
    update: XOR<OperatorUpdateWithoutLineItemsInput, OperatorUncheckedUpdateWithoutLineItemsInput>
    create: XOR<OperatorCreateWithoutLineItemsInput, OperatorUncheckedCreateWithoutLineItemsInput>
    where?: OperatorWhereInput
  }

  export type OperatorUpdateToOneWithWhereWithoutLineItemsInput = {
    where?: OperatorWhereInput
    data: XOR<OperatorUpdateWithoutLineItemsInput, OperatorUncheckedUpdateWithoutLineItemsInput>
  }

  export type OperatorUpdateWithoutLineItemsInput = {
    operatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OperatorUncheckedUpdateWithoutLineItemsInput = {
    operatorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LineItemCreateWithoutOperatorInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contract: ContractCreateNestedOneWithoutLineItemsInput
    equipment: EquipmentCreateNestedOneWithoutLineItemsInput
  }

  export type LineItemUncheckedCreateWithoutOperatorInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contractId: string
    equipmentId: string
  }

  export type LineItemCreateOrConnectWithoutOperatorInput = {
    where: LineItemWhereUniqueInput
    create: XOR<LineItemCreateWithoutOperatorInput, LineItemUncheckedCreateWithoutOperatorInput>
  }

  export type LineItemCreateManyOperatorInputEnvelope = {
    data: LineItemCreateManyOperatorInput | LineItemCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type LineItemUpsertWithWhereUniqueWithoutOperatorInput = {
    where: LineItemWhereUniqueInput
    update: XOR<LineItemUpdateWithoutOperatorInput, LineItemUncheckedUpdateWithoutOperatorInput>
    create: XOR<LineItemCreateWithoutOperatorInput, LineItemUncheckedCreateWithoutOperatorInput>
  }

  export type LineItemUpdateWithWhereUniqueWithoutOperatorInput = {
    where: LineItemWhereUniqueInput
    data: XOR<LineItemUpdateWithoutOperatorInput, LineItemUncheckedUpdateWithoutOperatorInput>
  }

  export type LineItemUpdateManyWithWhereWithoutOperatorInput = {
    where: LineItemScalarWhereInput
    data: XOR<LineItemUpdateManyMutationInput, LineItemUncheckedUpdateManyWithoutOperatorInput>
  }

  export type EquipmentTypeCreateWithoutWaitingListItemsInput = {
    id?: string
    name: string
    equipment?: EquipmentCreateNestedManyWithoutEquipmentTypeInput
  }

  export type EquipmentTypeUncheckedCreateWithoutWaitingListItemsInput = {
    id?: string
    name: string
    equipment?: EquipmentUncheckedCreateNestedManyWithoutEquipmentTypeInput
  }

  export type EquipmentTypeCreateOrConnectWithoutWaitingListItemsInput = {
    where: EquipmentTypeWhereUniqueInput
    create: XOR<EquipmentTypeCreateWithoutWaitingListItemsInput, EquipmentTypeUncheckedCreateWithoutWaitingListItemsInput>
  }

  export type EquipmentTypeUpsertWithoutWaitingListItemsInput = {
    update: XOR<EquipmentTypeUpdateWithoutWaitingListItemsInput, EquipmentTypeUncheckedUpdateWithoutWaitingListItemsInput>
    create: XOR<EquipmentTypeCreateWithoutWaitingListItemsInput, EquipmentTypeUncheckedCreateWithoutWaitingListItemsInput>
    where?: EquipmentTypeWhereInput
  }

  export type EquipmentTypeUpdateToOneWithWhereWithoutWaitingListItemsInput = {
    where?: EquipmentTypeWhereInput
    data: XOR<EquipmentTypeUpdateWithoutWaitingListItemsInput, EquipmentTypeUncheckedUpdateWithoutWaitingListItemsInput>
  }

  export type EquipmentTypeUpdateWithoutWaitingListItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    equipment?: EquipmentUpdateManyWithoutEquipmentTypeNestedInput
  }

  export type EquipmentTypeUncheckedUpdateWithoutWaitingListItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    equipment?: EquipmentUncheckedUpdateManyWithoutEquipmentTypeNestedInput
  }

  export type EquipmentCreateWithoutDailyUsageSummaryInput = {
    equipmentId?: string
    status?: string
    equipmentType: EquipmentTypeCreateNestedOneWithoutEquipmentInput
    lineItems?: LineItemCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentUncheckedCreateWithoutDailyUsageSummaryInput = {
    equipmentId?: string
    status?: string
    equipmentTypeId: string
    lineItems?: LineItemUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type EquipmentCreateOrConnectWithoutDailyUsageSummaryInput = {
    where: EquipmentWhereUniqueInput
    create: XOR<EquipmentCreateWithoutDailyUsageSummaryInput, EquipmentUncheckedCreateWithoutDailyUsageSummaryInput>
  }

  export type ClientCreateWithoutDailySummariesInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
    contracts?: ContractCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutDailySummariesInput = {
    clientId?: string
    name: string
    email: string
    phone?: string | null
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutDailySummariesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutDailySummariesInput, ClientUncheckedCreateWithoutDailySummariesInput>
  }

  export type EquipmentUpsertWithoutDailyUsageSummaryInput = {
    update: XOR<EquipmentUpdateWithoutDailyUsageSummaryInput, EquipmentUncheckedUpdateWithoutDailyUsageSummaryInput>
    create: XOR<EquipmentCreateWithoutDailyUsageSummaryInput, EquipmentUncheckedCreateWithoutDailyUsageSummaryInput>
    where?: EquipmentWhereInput
  }

  export type EquipmentUpdateToOneWithWhereWithoutDailyUsageSummaryInput = {
    where?: EquipmentWhereInput
    data: XOR<EquipmentUpdateWithoutDailyUsageSummaryInput, EquipmentUncheckedUpdateWithoutDailyUsageSummaryInput>
  }

  export type EquipmentUpdateWithoutDailyUsageSummaryInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentType?: EquipmentTypeUpdateOneRequiredWithoutEquipmentNestedInput
    lineItems?: LineItemUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateWithoutDailyUsageSummaryInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    equipmentTypeId?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type ClientUpsertWithoutDailySummariesInput = {
    update: XOR<ClientUpdateWithoutDailySummariesInput, ClientUncheckedUpdateWithoutDailySummariesInput>
    create: XOR<ClientCreateWithoutDailySummariesInput, ClientUncheckedCreateWithoutDailySummariesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutDailySummariesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutDailySummariesInput, ClientUncheckedUpdateWithoutDailySummariesInput>
  }

  export type ClientUpdateWithoutDailySummariesInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutDailySummariesInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ContractCreateManyClientInput = {
    contractId?: string
    siteId: string
    startDate: Date | string
    endDate: Date | string
  }

  export type DailyUsageSummaryCreateManyClientInput = {
    id?: string
    date: Date | string
    equipmentId: string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
  }

  export type ContractUpdateWithoutClientInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lineItems?: LineItemUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutClientInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lineItems?: LineItemUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutClientInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyUsageSummaryUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    equipment?: EquipmentUpdateOneRequiredWithoutDailyUsageSummaryNestedInput
  }

  export type DailyUsageSummaryUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
  }

  export type DailyUsageSummaryUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    equipmentId?: StringFieldUpdateOperationsInput | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
  }

  export type EquipmentCreateManyEquipmentTypeInput = {
    equipmentId?: string
    status?: string
  }

  export type WaitingListCreateManyEquipmentTypeInput = {
    requestId?: string
    clientId: string
    quantity: number
    requestedStartDate: Date | string
    status?: string
    createdAt?: Date | string
  }

  export type EquipmentUpdateWithoutEquipmentTypeInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUpdateManyWithoutEquipmentNestedInput
    DailyUsageSummary?: DailyUsageSummaryUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateWithoutEquipmentTypeInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lineItems?: LineItemUncheckedUpdateManyWithoutEquipmentNestedInput
    DailyUsageSummary?: DailyUsageSummaryUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type EquipmentUncheckedUpdateManyWithoutEquipmentTypeInput = {
    equipmentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type WaitingListUpdateWithoutEquipmentTypeInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaitingListUncheckedUpdateWithoutEquipmentTypeInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WaitingListUncheckedUpdateManyWithoutEquipmentTypeInput = {
    requestId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    requestedStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LineItemCreateManyEquipmentInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contractId: string
    lastOperatorId?: string | null
  }

  export type DailyUsageSummaryCreateManyEquipmentInput = {
    id?: string
    date: Date | string
    totalEngineHours: number
    totalIdleHours: number
    workingHours: number
    fuelConsumed: number
    distanceTraveled?: number | null
    highEngineTempAlerts: number
    suddenFuelDrops: number
    diagnosticErrors: number
    clientClientId?: string | null
  }

  export type LineItemUpdateWithoutEquipmentInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contract?: ContractUpdateOneRequiredWithoutLineItemsNestedInput
    operator?: OperatorUpdateOneWithoutLineItemsNestedInput
  }

  export type LineItemUncheckedUpdateWithoutEquipmentInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contractId?: StringFieldUpdateOperationsInput | string
    lastOperatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LineItemUncheckedUpdateManyWithoutEquipmentInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contractId?: StringFieldUpdateOperationsInput | string
    lastOperatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DailyUsageSummaryUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    Client?: ClientUpdateOneWithoutDailySummariesNestedInput
  }

  export type DailyUsageSummaryUncheckedUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    clientClientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DailyUsageSummaryUncheckedUpdateManyWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: FloatFieldUpdateOperationsInput | number
    totalIdleHours?: FloatFieldUpdateOperationsInput | number
    workingHours?: FloatFieldUpdateOperationsInput | number
    fuelConsumed?: FloatFieldUpdateOperationsInput | number
    distanceTraveled?: NullableFloatFieldUpdateOperationsInput | number | null
    highEngineTempAlerts?: IntFieldUpdateOperationsInput | number
    suddenFuelDrops?: IntFieldUpdateOperationsInput | number
    diagnosticErrors?: IntFieldUpdateOperationsInput | number
    clientClientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LineItemCreateManyContractInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    equipmentId: string
    lastOperatorId?: string | null
  }

  export type LineItemUpdateWithoutContractInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    equipment?: EquipmentUpdateOneRequiredWithoutLineItemsNestedInput
    operator?: OperatorUpdateOneWithoutLineItemsNestedInput
  }

  export type LineItemUncheckedUpdateWithoutContractInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    equipmentId?: StringFieldUpdateOperationsInput | string
    lastOperatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LineItemUncheckedUpdateManyWithoutContractInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    equipmentId?: StringFieldUpdateOperationsInput | string
    lastOperatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LineItemCreateManyOperatorInput = {
    lineItemId?: string
    startDate: Date | string
    endDate: Date | string
    totalEngineHours?: number | null
    fuelUsage?: number | null
    downtimeHours?: number | null
    operatingDays?: number | null
    contractId: string
    equipmentId: string
  }

  export type LineItemUpdateWithoutOperatorInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contract?: ContractUpdateOneRequiredWithoutLineItemsNestedInput
    equipment?: EquipmentUpdateOneRequiredWithoutLineItemsNestedInput
  }

  export type LineItemUncheckedUpdateWithoutOperatorInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contractId?: StringFieldUpdateOperationsInput | string
    equipmentId?: StringFieldUpdateOperationsInput | string
  }

  export type LineItemUncheckedUpdateManyWithoutOperatorInput = {
    lineItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalEngineHours?: NullableFloatFieldUpdateOperationsInput | number | null
    fuelUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    downtimeHours?: NullableFloatFieldUpdateOperationsInput | number | null
    operatingDays?: NullableIntFieldUpdateOperationsInput | number | null
    contractId?: StringFieldUpdateOperationsInput | string
    equipmentId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}