generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  clientId  String     @id @default(cuid())
  name      String
  email     String     @unique
  phone     String?
  contracts Contract[]
}

model EquipmentType {
  id               String        @id @default(cuid())
  name             String        @unique
  equipment        Equipment[]
  waitingListItems WaitingList[]
  demandForecasts  DemandForecast[] 
}

model Equipment {
  equipmentId     String        @id @default(cuid())
  status          String        @default("available")
  equipmentType   EquipmentType @relation(fields: [equipmentTypeId], references: [id])
  equipmentTypeId String
  lineItems       LineItem[]
}

model Contract {
  contractId String     @id @default(cuid())
  siteId     String
  startDate  DateTime
  endDate    DateTime
  client     Client     @relation(fields: [clientId], references: [clientId])
  clientId   String
  lineItems  LineItem[]
}

model LineItem {
  lineItemId       String         @id @default(cuid())
  startDate        DateTime?
  endDate          DateTime?
  totalEngineHours Float?
  fuelUsage        Float?
  downtimeHours    Float?
  operatingDays    Int?
  contract         Contract       @relation(fields: [contractId], references: [contractId])
  contractId       String
  equipment        Equipment      @relation(fields: [equipmentId], references: [equipmentId])
  equipmentId      String
  operator         Operator?      @relation(fields: [lastOperatorId], references: [operatorId])
  lastOperatorId   String?
  usage            LineItemUsage?
  anomalies        AnomalyLog[]
}

model Operator {
  operatorId String     @id @default(cuid())
  name       String
  lineItems  LineItem[]
}

model WaitingList {
  requestId          String        @id @default(cuid())
  clientId           String
  equipmentType      EquipmentType @relation(fields: [equipmentTypeId], references: [id])
  equipmentTypeId    String
  quantity           Int
  requestedStartDate DateTime
  status             String        @default("PENDING")
  createdAt          DateTime      @default(now())
}

enum EventType {
  ENGINE_STATUS
  FUEL_LEVEL
  LOCATION_UPDATE
  ENGINE_TEMP
  DIAGNOSTIC_CODE
  PAYLOAD_CYCLE
  HYDRAULIC_PRESSURE
}

model RawEventLog {
  id          String    @id @default(cuid())
  timestamp   DateTime  @default(now())
  equipmentId String
  eventType   EventType
  value       Json
  isProcessed Boolean   @default(false)
}

model LineItemUsage {
  id String @id @default(cuid())

  totalEngineHours Float @default(0)
  totalIdleHours   Float @default(0)
  fuelConsumed     Float @default(0)

  workingHours        Float  @default(0)
  workingToIdleRatio  Float  @default(0)
  fuelBurnRate        Float  @default(0)
  distanceTraveled    Float? @default(0)
  payloadMovedTonnes  Float? @default(0)
  avgCycleTimeSeconds Float? @default(0)

  lineItem   LineItem @relation(fields: [lineItemId], references: [lineItemId])
  lineItemId String   @unique
}

model DemandForecast {
  id               String        @id @default(cuid())
  equipmentTypeId  String
  month            DateTime
  forecastedDemand Int
  createdAt        DateTime      @default(now())
  
  // Relation to EquipmentType
  equipmentType    EquipmentType @relation(fields: [equipmentTypeId], references: [id])
  
  @@index([equipmentTypeId, month])
}

enum AnomalySeverity {
  LOW
  MEDIUM
  HIGH
}

enum AnomalyStatus {
  UNRESOLVED
  RESOLVED
}

enum AnomalyType {
  POOR_WORKING_TO_IDLE_RATIO
  HIGH_FUEL_BURN_RATE
  SLOW_CYCLE_TIME
  GEOFENCE_BREACH
  AFTER_HOURS_OPERATION
  SUDDEN_FUEL_DROP
  HIGH_ENGINE_TEMP
  FREQUENT_DIAGNOSTIC_ERRORS
  MISSED_MAINTENANCE_WINDOW
}

model AnomalyLog {
  id          String          @id @default(cuid())
  timestamp   DateTime        @default(now())
  anomalyType AnomalyType
  severity    AnomalySeverity
  status      AnomalyStatus   @default(UNRESOLVED)
  details     Json

  lineItem   LineItem @relation(fields: [lineItemId], references: [lineItemId])
  lineItemId String
}